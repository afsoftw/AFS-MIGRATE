*&---------------------------------------------------------------------*
*& Report ZAFS_MIGRATE
*&---------------------------------------------------------------------*
*& Product supplier: Advanced Frontier Software
*& License: LGPL v2.1
*&---------------------------------------------------------------------*
REPORT zafs_migrate.

*INCLUDE zafs_migrate_class_top.

TYPES: BEGIN OF type_index_csv,
         object_type  TYPE char20,
         object_name  TYPE char30,
         content_type TYPE char20,
         file         TYPE char255,
       END OF type_index_csv,
       type_index_csv_t TYPE TABLE OF type_index_csv,

       BEGIN OF type_domain_attr_csv,
         ddtext    TYPE as4text,
         datatype  TYPE datatype_d,
         leng      TYPE ddleng,
         outputlen TYPE outputlen,
         decimals  TYPE decimals,
         lowercase TYPE lowercase,
         signflag  TYPE signflag,
       END OF type_domain_attr_csv,
       type_domain_attr_csv_t TYPE TABLE OF type_domain_attr_csv,

       BEGIN OF type_data_element_attr_csv,
         ddtext     TYPE as4text,
         domname    TYPE domname,
         headlen    TYPE headlen,
         scrlen1    TYPE scrlen_s,
         scrlen2    TYPE scrlen_m,
         scrlen3    TYPE scrlen_l,
         dtelmaster TYPE masterlang,
         datatype   TYPE datatype_d,
         leng       TYPE ddleng,
         decimals   TYPE decimals,
         outputlen  TYPE outputlen,
         lowercase  TYPE lowercase,
         signflag   TYPE signflag,
         refkind    TYPE typekind,
         reptext    TYPE reptext,
         scrtext_s  TYPE scrtext_s,
         scrtext_m  TYPE scrtext_m,
         scrtext_l  TYPE scrtext_l,
       END OF type_data_element_attr_csv,
       type_data_element_attr_csv_t TYPE TABLE OF type_data_element_attr_csv,

       BEGIN OF type_structure_attr_csv,
         ddtext   TYPE as4text,
         tabclass TYPE tabclass,
       END OF type_structure_attr_csv,
       type_structure_attr_csv_t TYPE TABLE OF type_structure_attr_csv,

       BEGIN OF type_structure_fields_csv,
         ddtext     TYPE as4text,
         fieldname  TYPE fieldname,
         position   TYPE tabfdpos,
         rollname   TYPE rollname,
         adminfield TYPE adminfield,
         inttype    TYPE inttype,
         intlen     TYPE intlen,
         datatype   TYPE datatype_d,
         leng       TYPE ddleng,
         decimals   TYPE decimals,
         domname    TYPE domname,
         comptype   TYPE comptype,
       END OF type_structure_fields_csv,
       type_structure_fields_csv_t TYPE TABLE OF type_structure_fields_csv,

       BEGIN OF type_table_type_attr_csv,
         ddtext     TYPE as4text,
         rowtype    TYPE ttrowtype,
         rowkind    TYPE typekind,
         datatype   TYPE datatype_d,
         accessmode TYPE accessmode,
         keydef     TYPE ttypkeydef,
         keykind    TYPE keykind,
         typelen    TYPE ddleng,
       END OF type_table_type_attr_csv,
       type_table_type_attr_csv_t TYPE TABLE OF type_table_type_attr_csv,

       BEGIN OF type_transp_table_attr_csv,
         ddtext   TYPE as4text,
         tabclass TYPE tabclass,
         clidep   TYPE clidep,
         mainflag TYPE maintflag,
         contflag TYPE contflag,
         tabkat   TYPE tabkat,
         tabart   TYPE tabart,
         bufallow TYPE bufallow,
       END OF type_transp_table_attr_csv,
       type_transp_table_attr_csv_t TYPE TABLE OF type_transp_table_attr_csv,

       BEGIN OF type_transp_table_fields_csv,
         ddtext     TYPE as4text,
         fieldname  TYPE fieldname,
         position   TYPE tabfdpos,
         keyflag    TYPE keyflag,
         rollname   TYPE rollname,
         adminfield TYPE adminfield,
         inttype    TYPE inttype,
         intlen     TYPE intlen,
         notnull    TYPE notnull,
         datatype   TYPE datatype_d,
         leng       TYPE ddleng,
         decimals   TYPE decimals,
         domname    TYPE domname,
         comptype   TYPE comptype,
       END OF type_transp_table_fields_csv,
       type_transp_table_fields_csv_t TYPE TABLE OF type_transp_table_fields_csv,

       BEGIN OF type_mess_class_attr_csv,
         stext TYPE as4text,
       END OF type_mess_class_attr_csv,
       type_mess_class_attr_csv_t TYPE TABLE OF type_mess_class_attr_csv,

       BEGIN OF type_mess_class_messages_csv,
         msgnr   TYPE msgnr,
         text    TYPE natxt,
         selfdef TYPE doku_selfd,
       END OF type_mess_class_messages_csv,
       type_mess_class_messages_csv_t TYPE TABLE OF type_mess_class_messages_csv,

       BEGIN OF type_search_help_attr_csv,
         ddlanguage       TYPE ddlanguage,
         ddtext           TYPE ddtext,
         issimple         TYPE ddshsimple,
         elemexi          TYPE elemexi,
         nofields         TYPE ddshnofld,
         attachexi        TYPE ddshattexi,
         selmethod        TYPE selmethod,
         selmtype         TYPE selmtype,
         texttab          TYPE selmethtxt,
         selmexit         TYPE ddshselext,
         hotkey           TYPE ddshhotkey,
         dialogtype       TYPE ddshdiatyp,
         actflag          TYPE actflag,
         autosuggest      TYPE ddautosuggest,
         fuzzy_search     TYPE ddfuzzy_search,
         fuzzy_similarity TYPE ddfuzzy_similarity,
       END OF type_search_help_attr_csv,
       type_search_help_attr_csv_t TYPE TABLE OF type_search_help_attr_csv,

       BEGIN OF type_search_help_params_csv,
         fieldname  TYPE shlpfield,
         flposition TYPE sfposition,
         rollname   TYPE shlpsparde,
         shlpinput  TYPE shlpinput,
         shlpoutput TYPE shlpoutput,
         shlpselpos TYPE shlpselpos,
         shlpseldis TYPE shlpseldis,
         shlplispos TYPE shlplispos,
         shlpupper  TYPE mcnoupper,
         defaultval TYPE ddshdefval,
         defaulttyp TYPE ddshdeftyp,
         sqltab     TYPE tabname,
         rollchange TYPE ddshrollch,
         indexname  TYPE indexid,
         domname    TYPE domname,
         headlen    TYPE headlen,
         scrlen1    TYPE scrlen_s,
         scrlen2    TYPE scrlen_m,
         scrlen3    TYPE scrlen_l,
         datatype   TYPE datatype_d,
         leng       TYPE ddleng,
         outputlen  TYPE outputlen,
         decimals   TYPE decimals,
         lowercase  TYPE lowercase,
         signflag   TYPE signflag,
         convexit   TYPE convexit,
         proxytype  TYPE proxytype,
       END OF type_search_help_params_csv,
       type_search_help_params_csv_t TYPE TABLE OF type_search_help_params_csv,

       BEGIN OF type_func_grp_attr_csv,
         fungname TYPE rs38l_area,
         areat    TYPE areat,
       END OF type_func_grp_attr_csv,
       type_func_grp_attr_csv_t TYPE TABLE OF type_func_grp_attr_csv,

       BEGIN OF type_function_attr_csv,
         funcname  TYPE rs38l_fnam,
         pname     TYPE pname,
         include   TYPE includenr,
         stext     TYPE rs38l_ftxt,
         area	     TYPE rs38l_area,
         active    TYPE activef,
         generated TYPE generated,
         freedate  TYPE freedate,
         global    TYPE rs38l_glob,
         loc_priv  TYPE rs38l_temp,
         exten1    TYPE spras,
         exten2    TYPE rs38l_korr,
         exten3    TYPE s_excclass,
         exten4    TYPE paknocheck,
       END OF type_function_attr_csv,
       type_function_attr_csv_t TYPE TABLE OF type_function_attr_csv,

       BEGIN OF type_function_params_csv,
         funcname   TYPE rs38l_fnam,
         r3state    TYPE r3state,
         parameter  TYPE rs38l_par_,
         paramtype  TYPE rs38l_kind,
         structure  TYPE rs38l_typ,
         defaultval TYPE rs38l_defo,
         reference  TYPE rs38l_refe,
         pposition  TYPE sytabix,
         optional   TYPE rs38l_opti,
         type       TYPE rs38l_type,
         class      TYPE rs38l_clas,
         ref_class  TYPE rs38l_clas,
       END OF type_function_params_csv,
       type_function_params_csv_t TYPE TABLE OF type_function_params_csv,

       BEGIN OF type_program_attr_csv,
         subc TYPE subc,
         text TYPE repti,
       END OF type_program_attr_csv,
       type_program_attr_csv_t TYPE TABLE OF type_program_attr_csv,

       BEGIN OF type_program_source_code_csv,
         line TYPE text255,
       END OF type_program_source_code_csv,
       type_program_source_code_csv_t TYPE TABLE OF type_program_source_code_csv,

       BEGIN OF type_transaction_attr_csv,
         ttext TYPE ttext_stct,
         pgmna TYPE program_id,
         dypno TYPE dynpronr,
         menue TYPE sychar05,
         cinfo TYPE syhex01,
         arbgb TYPE msgid,
       END OF type_transaction_attr_csv,
       type_transaction_attr_csv_t TYPE TABLE OF type_transaction_attr_csv.

CONSTANTS: gc_export_table_name TYPE char16 VALUE 'ZAFS_MIGRATE_EXP'.

CONSTANTS: gc_object_type_domain         TYPE char20 VALUE 'DOMAIN',
           gc_object_type_data_element   TYPE char20 VALUE 'DATA_ELEMENT',
           gc_object_type_structure      TYPE char20 VALUE 'STRUCTURE',
           gc_object_type_table_type     TYPE char20 VALUE 'TABLE_TYPE',
           gc_object_type_transp_table   TYPE char20 VALUE 'TRANSPARENT_TABLE',
           gc_object_type_mess_class     TYPE char20 VALUE 'MESSAGE_CLASS',
           gc_object_type_search_help    TYPE char20 VALUE 'SEARCH_HELP',
           gc_object_type_function_group TYPE char20 VALUE 'FUNCTION_GROUP',
           gc_object_type_function       TYPE char20 VALUE 'FUNCTION',
           gc_object_type_program        TYPE char20 VALUE 'PROGRAM',
           gc_object_type_transaction    TYPE char20 VALUE 'TRANSACTION'.

CONSTANTS: gc_content_type_attributes  TYPE char20 VALUE 'ATTRIBUTES',
           gc_content_type_fields      TYPE char20 VALUE 'FIELDS',
           gc_content_type_parameters  TYPE char20 VALUE 'PARAMETERS',
           gc_content_type_table_data  TYPE char20 VALUE 'TABLE_DATA',
           gc_content_type_messages    TYPE char20 VALUE 'MESSAGES',
           gc_content_type_source_code TYPE char20 VALUE 'SOURCE_CODE'.

CONSTANTS: gc_abap_on  TYPE char1 VALUE 'X',
           gc_abap_off TYPE char1 VALUE ''.

CLASS cl_rsda_csv_converter DEFINITION.

  PUBLIC SECTION.
    CONSTANTS c_default_separator TYPE char1 VALUE ','.
    CONSTANTS c_default_delimiter TYPE char1 VALUE '"'.
    CONSTANTS c_inttype_byte TYPE inttype VALUE cl_abap_typedescr=>typekind_int1.
    CONSTANTS c_inttype_char TYPE inttype VALUE cl_abap_typedescr=>typekind_char.
    CONSTANTS c_inttype_date TYPE inttype VALUE cl_abap_typedescr=>typekind_date.
    CONSTANTS c_inttype_float TYPE inttype VALUE cl_abap_typedescr=>typekind_float.
    CONSTANTS c_inttype_integer TYPE inttype VALUE cl_abap_typedescr=>typekind_int.
    CONSTANTS c_inttype_numeric_char TYPE inttype VALUE cl_abap_typedescr=>typekind_num.
    CONSTANTS c_inttype_packed TYPE inttype VALUE cl_abap_typedescr=>typekind_packed.
    CONSTANTS c_inttype_raw TYPE inttype VALUE cl_abap_typedescr=>typekind_hex.
    CONSTANTS c_inttype_rawstring TYPE inttype VALUE cl_abap_typedescr=>typekind_xstring.
    CONSTANTS c_inttype_short_integer TYPE inttype VALUE cl_abap_typedescr=>typekind_int2.
    CONSTANTS c_inttype_string TYPE inttype VALUE cl_abap_typedescr=>typekind_string.
    CONSTANTS c_inttype_time TYPE inttype VALUE cl_abap_typedescr=>typekind_time.
    DATA separator TYPE char1 READ-ONLY.
    DATA delimiter TYPE char1 READ-ONLY.
    CONSTANTS c_inttype_long_integer TYPE inttype VALUE 'I'. "cl_abap_typedescr=>typekind_int8.
    CONSTANTS c_inttype_decfloat34 TYPE inttype VALUE 'F'. "cl_abap_typedescr=>typekind_decfloat34.
    CONSTANTS c_inttype_decfloat16 TYPE inttype VALUE 'F'. "cl_abap_typedescr=>typekind_decfloat16.

    METHODS: constructor IMPORTING i_delimiter      TYPE char1
                                   i_separator      TYPE char1
                                   i_escape         TYPE char1 OPTIONAL
                                   i_line_separator TYPE char1 OPTIONAL,
      csv_to_structure IMPORTING i_data   TYPE clike
                       EXPORTING e_s_data TYPE any,
      structure_to_csv IMPORTING i_s_data TYPE any
                       EXPORTING e_data   TYPE clike.
    CLASS-METHODS: class_constructor,
      create IMPORTING i_delimiter      TYPE char1 DEFAULT c_default_delimiter
                       i_separator      TYPE char1 DEFAULT c_default_separator
                       i_escape         TYPE char1 OPTIONAL
                       i_line_separator TYPE char1 DEFAULT cl_abap_char_utilities=>newline
             RETURNING VALUE(r_r_conv)  TYPE REF TO cl_rsda_csv_converter,
      get_char_workarea IMPORTING i_s_data        TYPE any
                        RETURNING VALUE(r_r_data) TYPE REF TO data.

  PRIVATE SECTION.
    CLASS-DATA: BEGIN OF p_s_char_length,
                  byte          TYPE i,
                  decfloat16    TYPE i,
                  decfloat34    TYPE i,
                  short_integer TYPE i,
                  integer       TYPE i,
                  long_integer  TYPE i,
                  float         TYPE i,
                  packed        TYPE i,
                END OF p_s_char_length.

    DATA: doubled_delimiter TYPE char2,
          initial_char      TYPE char3,
          special_chars     TYPE char2.

    CLASS-DATA: c_true  TYPE rs_bool VALUE 'X',
                c_false TYPE rs_bool VALUE ' '.

ENDCLASS.

CLASS cl_rsda_csv_converter IMPLEMENTATION.

  METHOD constructor.

    IF i_separator IS INITIAL.
      me->separator = me->c_default_separator.
    ELSE.
      me->separator = i_separator.
    ENDIF.
    IF i_delimiter   IS INITIAL.
      me->delimiter = me->c_default_delimiter.
    ELSE.
      me->delimiter = i_delimiter.
    ENDIF.
    IF me->separator EQ me->delimiter.
      MESSAGE x000(00).
    ENDIF.

    CONCATENATE me->delimiter me->delimiter INTO me->doubled_delimiter.
    CONCATENATE me->delimiter me->separator INTO me->special_chars.
    CONCATENATE me->delimiter me->delimiter INTO me->initial_char SEPARATED BY space.

  ENDMETHOD.

  METHOD csv_to_structure.

    DATA:
      l_inttype TYPE inttype,
      l_len     TYPE i,
      l_len1    TYPE i,
      l_len2    TYPE i,
      l_parity  TYPE i,
      l_pos     TYPE i,
      l_pos1    TYPE i.

    FIELD-SYMBOLS:
      <l_data>       TYPE simple.

    CLEAR e_s_data.

    l_pos = 0.
    l_len = strlen( i_data ).
    WHILE l_pos LT l_len.

      ASSIGN COMPONENT sy-index OF STRUCTURE e_s_data TO <l_data>.
      IF sy-subrc NE 0.  EXIT.  ENDIF.

*       Skip leading spaces
      IF i_data+l_pos(*) CO space.  EXIT.  ENDIF.
      ADD sy-fdpos TO l_pos.

      IF     i_data+l_pos(1) EQ me->delimiter.

*         Opening delimiter found ==> Start of delimited value
        ADD 1 TO l_pos. "skip opening delimiter
*         Look for closing delimiter
        IF l_pos           GE l_len         OR
           i_data+l_pos(*) NA me->delimiter.
*           syntax error: missing closing delimiter
        ENDIF.
        IF sy-fdpos GT 0.
          <l_data> = i_data+l_pos(sy-fdpos).
          ADD sy-fdpos TO l_pos.
        ENDIF.
        l_pos1 = sy-fdpos.
        ADD 1 TO l_pos.

*         Look for doubled delimiters
        IF l_pos           LT l_len         AND
           i_data+l_pos(1) EQ me->delimiter.
          DESCRIBE FIELD <l_data> LENGTH l_len1 IN CHARACTER MODE.
          DO.
            IF i_data+l_pos(*) CO me->delimiter.  ENDIF.
            IF sy-fdpos EQ 0.  EXIT.  ENDIF.
            l_parity = sy-fdpos MOD 2.
            l_len2   = sy-fdpos DIV 2 + l_parity.
            IF l_pos1 LT l_len1.
              <l_data>+l_pos1(*) = i_data+l_pos(l_len2).
              ADD l_len2 TO l_pos1.
            ENDIF.
            ADD sy-fdpos TO l_pos.
            IF l_parity EQ 0.  EXIT.  ENDIF. "closing delimiter found
            IF l_pos GE l_len.
*             syntax error: missing closing delimiter
              EXIT.
            ENDIF.
            IF i_data+l_pos(*) CA me->delimiter.  ENDIF.
            IF l_pos1 LT l_len1.
              <l_data>+l_pos1(*) = i_data+l_pos(sy-fdpos).
              ADD sy-fdpos TO l_pos1.
            ENDIF.
            ADD sy-fdpos TO l_pos.
            ADD 1 TO l_pos.
            IF l_pos GE l_len.
*               Syntax error: missing closing delimiter
              EXIT.
            ENDIF.
          ENDDO.
        ENDIF.

        IF l_pos           LT l_len         AND
           i_data+l_pos(*) CA me->separator.
          IF sy-fdpos GT 0.
            IF i_data+l_pos(sy-fdpos) CN space.
*             Syntax error: non-space characters between closing delimiter and separator
            ENDIF.
*             Skip spaces between closing delimiter and separator
            ADD sy-fdpos TO l_pos.
          ENDIF.
        ENDIF.

      ELSE.

*         Non-delimited value

        IF l_pos GE l_len.
          CLEAR <l_data>.
          EXIT.
        ELSEIF i_data+l_pos(*) CA me->separator.
          IF sy-fdpos > 0.
            <l_data> = i_data+l_pos(sy-fdpos).
          ELSE.
            CLEAR <l_data>.
          ENDIF.
          ADD sy-fdpos TO l_pos.
        ELSE.
          <l_data> = i_data+l_pos(*).
          EXIT.
        ENDIF.

      ENDIF.
      ADD 1 TO l_pos.

    ENDWHILE.

  ENDMETHOD.

  METHOD structure_to_csv.
    DATA:
      l_inttype          TYPE inttype,
      l_len              TYPE i,
      l_pos              TYPE i,
      l_rx_out_of_bounds TYPE REF TO cx_sy_range_out_of_bounds.

    FIELD-SYMBOLS:
      <l_data>           TYPE simple.

    CLEAR e_data.
    l_pos = 0.
    DO.
      ASSIGN COMPONENT sy-index OF STRUCTURE i_s_data TO <l_data>.
      IF sy-subrc NE 0.  EXIT.  ENDIF.
      TRY.
          IF sy-index GT 1.
            REPLACE SECTION OFFSET l_pos LENGTH 1 OF e_data WITH me->separator.
            ADD 1 TO l_pos.
          ENDIF.
          DESCRIBE FIELD <l_data> TYPE l_inttype.
          CASE l_inttype.
            WHEN c_inttype_byte.
              e_data+l_pos(p_s_char_length-byte) = <l_data>.
              CONDENSE e_data+l_pos(p_s_char_length-byte).
              l_len = strlen( e_data+l_pos(p_s_char_length-byte) ).
            WHEN c_inttype_char         OR
                 c_inttype_numeric_char OR
                 c_inttype_date         OR
                 c_inttype_time.
              IF <l_data> CO space.
                l_len = strlen( me->initial_char ).
                e_data+l_pos(l_len) = me->initial_char.
              ELSEIF <l_data>(1) CO space            OR
                     <l_data>    CA me->special_chars.
                e_data+l_pos(*) = <l_data>.
                REPLACE ALL OCCURRENCES OF me->delimiter IN e_data+l_pos(*) WITH me->doubled_delimiter.
                CONCATENATE me->delimiter e_data+l_pos(*) me->delimiter INTO e_data+l_pos(*).
                l_len = strlen( e_data+l_pos(*) ).
              ELSE.
                l_len = strlen( <l_data> ).
                e_data+l_pos(l_len) = <l_data>(l_len).
              ENDIF.
            WHEN c_inttype_integer.
              e_data+l_pos(p_s_char_length-integer) = <l_data>.
              CONDENSE e_data+l_pos(p_s_char_length-integer).
              l_len = strlen( e_data+l_pos(p_s_char_length-integer) ).
              IF <l_data> LT 0.
                SHIFT e_data+l_pos(l_len) BY 1 PLACES CIRCULAR RIGHT.
              ENDIF.
            WHEN c_inttype_long_integer.
              e_data+l_pos(p_s_char_length-long_integer) = <l_data>.
              CONDENSE e_data+l_pos(p_s_char_length-long_integer).
              l_len = strlen( e_data+l_pos(p_s_char_length-long_integer) ).
              IF <l_data> LT 0.
                SHIFT e_data+l_pos(l_len) BY 1 PLACES CIRCULAR RIGHT.
              ENDIF.
            WHEN c_inttype_short_integer.
              e_data+l_pos(p_s_char_length-short_integer) = <l_data>.
              CONDENSE e_data+l_pos(p_s_char_length-short_integer).
              l_len = strlen( e_data+l_pos(p_s_char_length-short_integer) ).
              IF <l_data> LT 0.
                SHIFT e_data+l_pos(l_len) BY 1 PLACES CIRCULAR RIGHT.
              ENDIF.
            WHEN c_inttype_packed.
              DESCRIBE FIELD <l_data> LENGTH l_len IN BYTE MODE.
              l_len = l_len + l_len + 1.
              e_data+l_pos(l_len) = <l_data>.
              CONDENSE e_data+l_pos(l_len).
              l_len = strlen( e_data+l_pos(l_len) ).
              IF <l_data> LT 0.
                SHIFT e_data+l_pos(l_len) BY 1 PLACES CIRCULAR RIGHT.
              ENDIF.
            WHEN c_inttype_float.
              e_data+l_pos(p_s_char_length-float) = <l_data>.
              CONDENSE e_data+l_pos(p_s_char_length-float).
              l_len = strlen( e_data+l_pos(p_s_char_length-float) ).
            WHEN c_inttype_raw        OR
                 c_inttype_rawstring.
              e_data+l_pos(*) = <l_data>.
              l_len = strlen( e_data+l_pos(*) ).
            WHEN OTHERS.
*             Exception: Unsupported data type
              MESSAGE x000(00).
          ENDCASE.
          ADD l_len TO l_pos.
        CATCH cx_sy_range_out_of_bounds INTO l_rx_out_of_bounds.
*         Exception: Target field too small
          MESSAGE x000(00).
      ENDTRY.
    ENDDO.

  ENDMETHOD.

  METHOD class_constructor.

    CALL FUNCTION 'RSUT_INTTYPE_GET_CHAR_LENGTH'
      EXPORTING
        i_inttype     = c_inttype_byte
      IMPORTING
        e_char_length = p_s_char_length-byte.

    CALL FUNCTION 'RSUT_INTTYPE_GET_CHAR_LENGTH'
      EXPORTING
        i_inttype     = c_inttype_decfloat16
      IMPORTING
        e_char_length = p_s_char_length-decfloat16.

    CALL FUNCTION 'RSUT_INTTYPE_GET_CHAR_LENGTH'
      EXPORTING
        i_inttype     = c_inttype_decfloat34
      IMPORTING
        e_char_length = p_s_char_length-decfloat34.

    CALL FUNCTION 'RSUT_INTTYPE_GET_CHAR_LENGTH'
      EXPORTING
        i_inttype     = c_inttype_short_integer
      IMPORTING
        e_char_length = p_s_char_length-short_integer.

    CALL FUNCTION 'RSUT_INTTYPE_GET_CHAR_LENGTH'
      EXPORTING
        i_inttype     = c_inttype_integer
      IMPORTING
        e_char_length = p_s_char_length-integer.

    CALL FUNCTION 'RSUT_INTTYPE_GET_CHAR_LENGTH'
      EXPORTING
        i_inttype     = c_inttype_long_integer
      IMPORTING
        e_char_length = p_s_char_length-long_integer.

    CALL FUNCTION 'RSUT_INTTYPE_GET_CHAR_LENGTH'
      EXPORTING
        i_inttype     = c_inttype_float
      IMPORTING
        e_char_length = p_s_char_length-float.

    CALL FUNCTION 'RSUT_INTTYPE_GET_CHAR_LENGTH'
      EXPORTING
        i_inttype     = c_inttype_packed
        i_intlen      = 16
        i_decimals    = 2
      IMPORTING
        e_char_length = p_s_char_length-packed.

  ENDMETHOD.

  METHOD create.

    CREATE OBJECT r_r_conv
      EXPORTING
        i_delimiter = i_delimiter
        i_separator = i_separator.

  ENDMETHOD.

  METHOD get_char_workarea.

    DATA:
      l_clen    TYPE i,
      l_inttype TYPE inttype,
      l_len     TYPE i,
      l_wdel    TYPE rs_bool.

    FIELD-SYMBOLS:
      <l_data> TYPE simple.

    DO.
      ASSIGN COMPONENT sy-index OF STRUCTURE i_s_data TO <l_data>.
      IF sy-subrc NE 0.  EXIT.  ENDIF.
      IF sy-index GT 1.  ADD 1 TO l_len.  ENDIF.
      DESCRIBE FIELD <l_data> TYPE l_inttype.
      IF l_inttype = c_inttype_char.
        l_wdel = c_true.
      ELSE.
        l_wdel = c_false.
      ENDIF.
      CALL FUNCTION 'RSUT_FIELD_GET_CHAR_LENGTH'
        EXPORTING
          i_field           = <l_data>
          i_with_delimiters = l_wdel
        IMPORTING
          e_char_length     = l_clen
        EXCEPTIONS
          illegal_type      = 1.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.
      ADD l_clen TO l_len.
    ENDDO.
    CREATE DATA r_r_data TYPE c LENGTH l_len.

  ENDMETHOD.

ENDCLASS.

CLASS cl_import DEFINITION.

  PUBLIC SECTION.
    METHODS: import_selected IMPORTING iv_dir    TYPE string
                                       iv_pack   TYPE char30
                                       iv_p_doma TYPE char1
                                       iv_p_dtel TYPE char1
                                       iv_p_stru TYPE char1
                                       iv_p_tabt TYPE char1
                                       iv_p_tabl TYPE char1
                                       iv_p_mess TYPE char1
                                       iv_p_shlp TYPE char1
                                       iv_p_fung TYPE char1
                                       iv_p_func TYPE char1
                                       iv_p_prog TYPE char1
                                       iv_p_tran TYPE char1.
  PRIVATE SECTION.
    DATA: mv_package TYPE char30.

    DATA: ms_dd30v TYPE dd30v.

    METHODS:
      import_domain_attributes IMPORTING  iv_domname TYPE domname
                                          iv_file    TYPE string
                               EXCEPTIONS open_file_error empty_file insert_record_error,
      import_data_element_attributes IMPORTING  iv_rollname TYPE rollname
                                                iv_file     TYPE string
                                     EXCEPTIONS open_file_error empty_file insert_record_error activate_type_error,
      import_structure_attributes IMPORTING  iv_tabname TYPE tabname
                                             iv_file    TYPE string
                                  EXCEPTIONS open_file_error empty_file insert_record_error,
      import_structure_fields IMPORTING  iv_tabname TYPE tabname
                                         iv_file    TYPE string
                              EXCEPTIONS open_file_error empty_file insert_record_error activate_type_error,
      import_table_type_attributes IMPORTING  iv_typename TYPE ttypename
                                              iv_file     TYPE string
                                   EXCEPTIONS open_file_error empty_file insert_record_error activate_type_error,
      import_transp_table_attributes IMPORTING  iv_tabname TYPE tabname
                                                iv_file    TYPE string
                                     EXCEPTIONS open_file_error empty_file insert_record_error delete_table_error,
      import_transp_table_fields IMPORTING  iv_tabname TYPE tabname
                                            iv_file    TYPE string
                                 EXCEPTIONS open_file_error empty_file insert_record_error activate_table_error,
      import_transp_table_data IMPORTING  iv_tabname TYPE tabname
                                          iv_file    TYPE string
                               EXCEPTIONS open_file_error insert_record_error,
      delete_transparent_table IMPORTING  iv_tabname TYPE tabname
                               EXCEPTIONS delete_error,
      activate_transparent_table IMPORTING  iv_tabname TYPE tabname
                                 EXCEPTIONS activate_error,
      import_mess_class_attributes IMPORTING  iv_mcname TYPE arbgb
                                              iv_file   TYPE string
                                   EXCEPTIONS open_file_error empty_file insert_record_error,
      import_mess_class_messages IMPORTING  iv_mcname TYPE arbgb
                                            iv_file   TYPE string
                                 EXCEPTIONS open_file_error empty_file insert_record_error,
      import_search_help_attributes IMPORTING  iv_shlpname TYPE shlpname
                                               iv_file     TYPE string
                                    EXCEPTIONS open_file_error empty_file,
      import_search_help_parameters IMPORTING  iv_shlpname TYPE shlpname
                                               iv_file     TYPE string
                                    EXCEPTIONS open_file_error empty_file create_shlp_error activate_shlp_error,
      import_func_grp_attributes IMPORTING  iv_fungname TYPE rs38l_area
                                            iv_file     TYPE string
                                 EXCEPTIONS open_file_error empty_file insert_record_error,
      import_function_attributes IMPORTING  iv_funcname TYPE rs38l_fnam
                                            iv_file     TYPE string
                                 EXCEPTIONS open_file_error empty_file insert_record_error,
      import_function_parameters IMPORTING  iv_funcname TYPE rs38l_fnam
                                            iv_file     TYPE string
                                 EXCEPTIONS open_file_error empty_file insert_record_error,
      import_program_attributes IMPORTING  iv_progname TYPE progname
                                           iv_file     TYPE string
                                EXCEPTIONS open_file_error empty_file insert_record_error create_program_error,
      import_program_source_code IMPORTING  iv_progname TYPE progname
                                            iv_file     TYPE string
                                 EXCEPTIONS open_file_error empty_file create_program_error,
      import_transaction_attributes IMPORTING  iv_tcode TYPE tcode
                                               iv_file  TYPE string
                                    EXCEPTIONS open_file_error empty_file insert_record_error,
      read_data_from_csv IMPORTING  iv_file TYPE string
                         EXPORTING  et_data TYPE table
                         EXCEPTIONS open_file_error empty_file.

ENDCLASS.

CLASS cl_import IMPLEMENTATION.

  METHOD import_selected.

    DATA: lt_index_csv TYPE type_index_csv_t,
          lv_file      TYPE string,
          lv_mcname    TYPE arbgb,
          lv_shlpname  TYPE shlpname,
          lv_fungname  TYPE rs38l_area,
          lv_funcname  TYPE rs38l_fnam,
          lv_progname  TYPE progname,
          lv_tcode     TYPE tcode.

    FIELD-SYMBOLS: <lfs_index_csv> TYPE type_index_csv.

    me->mv_package = iv_pack.

    CONCATENATE iv_dir '\index.csv' INTO lv_file.

    CALL METHOD me->read_data_from_csv
      EXPORTING
        iv_file         = lv_file
      IMPORTING
        et_data         = lt_index_csv
      EXCEPTIONS
        open_file_error = 1
        empty_file      = 2.

    CASE sy-subrc.
      WHEN 1.
        MESSAGE 'Index file not found' TYPE 'S'.
        RETURN.
      WHEN 2.
        MESSAGE 'Index file is empty' TYPE 'S'.
        RETURN.
      WHEN OTHERS.
    ENDCASE.

    "Content type FIELDS always should follow after content type ATTRIBUTES
    "Content type TABLE_DATA always should follow after content type FIELDS
    SORT lt_index_csv BY object_type object_name content_type.

    IF iv_p_doma EQ gc_abap_on.
      LOOP AT lt_index_csv ASSIGNING <lfs_index_csv>
        WHERE object_type EQ gc_object_type_domain.
        CONCATENATE iv_dir '\' <lfs_index_csv>-file INTO lv_file.
        CASE <lfs_index_csv>-content_type.
          WHEN gc_content_type_attributes.
            CALL METHOD me->import_domain_attributes
              EXPORTING
                iv_domname          = <lfs_index_csv>-object_name
                iv_file             = lv_file
              EXCEPTIONS
                open_file_error     = 1
                empty_file          = 2
                insert_record_error = 3.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Domain file not found' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Domain file is empty' TYPE 'S'.
                RETURN.
              WHEN 3.
                MESSAGE 'Error inserting into DB table' TYPE 'S'.
                RETURN.
            ENDCASE.
        ENDCASE.
      ENDLOOP.

      COMMIT WORK AND WAIT.
    ENDIF.

    IF iv_p_dtel EQ gc_abap_on.
      LOOP AT lt_index_csv ASSIGNING <lfs_index_csv>
        WHERE object_type EQ gc_object_type_data_element.
        CONCATENATE iv_dir '\' <lfs_index_csv>-file INTO lv_file.
        CASE <lfs_index_csv>-content_type.
          WHEN gc_content_type_attributes.
            CALL METHOD me->import_data_element_attributes
              EXPORTING
                iv_rollname         = <lfs_index_csv>-object_name
                iv_file             = lv_file
              EXCEPTIONS
                open_file_error     = 1
                empty_file          = 2
                insert_record_error = 3.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Data element file not found' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Data element file is empty' TYPE 'S'.
                RETURN.
              WHEN 3.
                MESSAGE 'Error inserting into DB table' TYPE 'S'.
                RETURN.
              WHEN 4.
                MESSAGE 'Error activating type' TYPE 'S'.
                RETURN.
            ENDCASE.
        ENDCASE.
      ENDLOOP.
    ENDIF.

    IF iv_p_stru EQ gc_abap_on.
      LOOP AT lt_index_csv ASSIGNING <lfs_index_csv>
        WHERE object_type EQ gc_object_type_structure.
        CONCATENATE iv_dir '\' <lfs_index_csv>-file INTO lv_file.
        CASE <lfs_index_csv>-content_type.
          WHEN gc_content_type_attributes.
            CALL METHOD me->import_structure_attributes
              EXPORTING
                iv_tabname          = <lfs_index_csv>-object_name
                iv_file             = lv_file
              EXCEPTIONS
                open_file_error     = 1
                empty_file          = 2
                insert_record_error = 3.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Structure file not found' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Structure file is empty' TYPE 'S'.
                RETURN.
              WHEN 3.
                MESSAGE 'Error inserting into DB table' TYPE 'S'.
                RETURN.
            ENDCASE.
          WHEN gc_content_type_fields.
            CALL METHOD me->import_structure_fields
              EXPORTING
                iv_tabname          = <lfs_index_csv>-object_name
                iv_file             = lv_file
              EXCEPTIONS
                open_file_error     = 1
                empty_file          = 2
                insert_record_error = 3.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Structure file not found' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Structure file is empty' TYPE 'S'.
                RETURN.
              WHEN 3.
                MESSAGE 'Error inserting into DB table' TYPE 'S'.
                RETURN.
              WHEN 4.
                MESSAGE 'Error activating type' TYPE 'S'.
                RETURN.
            ENDCASE.
        ENDCASE.
      ENDLOOP.
    ENDIF.

    IF iv_p_tabt EQ gc_abap_on.
      LOOP AT lt_index_csv ASSIGNING <lfs_index_csv>
        WHERE object_type EQ gc_object_type_table_type.
        CONCATENATE iv_dir '\' <lfs_index_csv>-file INTO lv_file.
        CASE <lfs_index_csv>-content_type.
          WHEN gc_content_type_attributes.
            CALL METHOD me->import_table_type_attributes
              EXPORTING
                iv_typename         = <lfs_index_csv>-object_name
                iv_file             = lv_file
              EXCEPTIONS
                open_file_error     = 1
                empty_file          = 2
                insert_record_error = 3.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Table type file not found' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Table type file is empty' TYPE 'S'.
                RETURN.
              WHEN 3.
                MESSAGE 'Error inserting into DB table' TYPE 'S'.
                RETURN.
              WHEN 4.
                MESSAGE 'Error activating type' TYPE 'S'.
                RETURN.
            ENDCASE.
        ENDCASE.
      ENDLOOP.
    ENDIF.

    IF iv_p_tabl EQ gc_abap_on.
      LOOP AT lt_index_csv ASSIGNING <lfs_index_csv>
        WHERE object_type EQ gc_object_type_transp_table.
        CONCATENATE iv_dir '\' <lfs_index_csv>-file INTO lv_file.
        CASE <lfs_index_csv>-content_type.
          WHEN gc_content_type_attributes.
            CALL METHOD me->import_transp_table_attributes
              EXPORTING
                iv_tabname          = <lfs_index_csv>-object_name
                iv_file             = lv_file
              EXCEPTIONS
                open_file_error     = 1
                empty_file          = 2
                insert_record_error = 3
                delete_table_error  = 4.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Transparent table file not found' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Transparent table file is empty' TYPE 'S'.
                RETURN.
              WHEN 3.
                MESSAGE 'Error inserting into DB table' TYPE 'S'.
                RETURN.
              WHEN 4.
                MESSAGE 'Error deleting transparent table' TYPE 'S'.
                RETURN.
            ENDCASE.
          WHEN gc_content_type_fields.
            CALL METHOD me->import_transp_table_fields
              EXPORTING
                iv_tabname           = <lfs_index_csv>-object_name
                iv_file              = lv_file
              EXCEPTIONS
                open_file_error      = 1
                empty_file           = 2
                insert_record_error  = 3
                activate_table_error = 4.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Transparent table file not found' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Transparent table file is empty' TYPE 'S'.
                RETURN.
              WHEN 3.
                MESSAGE 'Error inserting into DB table' TYPE 'S'.
                RETURN.
              WHEN 4.
                MESSAGE 'Error activating transparent table' TYPE 'S'.
                RETURN.
            ENDCASE.
          WHEN gc_content_type_table_data.
            CALL METHOD me->import_transp_table_data
              EXPORTING
                iv_tabname          = <lfs_index_csv>-object_name
                iv_file             = lv_file
              EXCEPTIONS
                open_file_error     = 1
                insert_record_error = 2.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Transparent table file not found' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Error inserting into DB table' TYPE 'S'.
                RETURN.
            ENDCASE.
        ENDCASE.
      ENDLOOP.
    ENDIF.

    IF iv_p_mess EQ gc_abap_on.
      LOOP AT lt_index_csv ASSIGNING <lfs_index_csv>
        WHERE object_type EQ gc_object_type_mess_class.
        CONCATENATE iv_dir '\' <lfs_index_csv>-file INTO lv_file.
        CASE <lfs_index_csv>-content_type.
          WHEN gc_content_type_attributes.
            lv_mcname = <lfs_index_csv>-object_name.
            CALL METHOD me->import_mess_class_attributes
              EXPORTING
                iv_mcname           = lv_mcname
                iv_file             = lv_file
              EXCEPTIONS
                open_file_error     = 1
                empty_file          = 2
                insert_record_error = 3.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Message class file not found' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Message class file is empty' TYPE 'S'.
                RETURN.
              WHEN 3.
                MESSAGE 'Error inserting into DB table' TYPE 'S'.
                RETURN.
            ENDCASE.
          WHEN gc_content_type_messages.
            lv_mcname = <lfs_index_csv>-object_name.
            CALL METHOD me->import_mess_class_messages
              EXPORTING
                iv_mcname           = lv_mcname
                iv_file             = lv_file
              EXCEPTIONS
                open_file_error     = 1
                empty_file          = 2
                insert_record_error = 3.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Message class file not found' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Message class file is empty' TYPE 'S'.
                RETURN.
              WHEN 3.
                MESSAGE 'Error inserting into DB table' TYPE 'S'.
                RETURN.
            ENDCASE.
        ENDCASE.
      ENDLOOP.
    ENDIF.

    IF iv_p_shlp EQ gc_abap_on.
      LOOP AT lt_index_csv ASSIGNING <lfs_index_csv>
        WHERE object_type EQ gc_object_type_search_help.
        CONCATENATE iv_dir '\' <lfs_index_csv>-file INTO lv_file.
        CASE <lfs_index_csv>-content_type.
          WHEN gc_content_type_attributes.
            lv_shlpname = <lfs_index_csv>-object_name.
            CALL METHOD me->import_search_help_attributes
              EXPORTING
                iv_shlpname     = lv_shlpname
                iv_file         = lv_file
              EXCEPTIONS
                open_file_error = 1
                empty_file      = 2.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Search_help file not found' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Search_help file is empty' TYPE 'S'.
                RETURN.
            ENDCASE.
          WHEN gc_content_type_parameters.
            lv_shlpname = <lfs_index_csv>-object_name.
            CALL METHOD me->import_search_help_parameters
              EXPORTING
                iv_shlpname         = lv_shlpname
                iv_file             = lv_file
              EXCEPTIONS
                open_file_error     = 1
                empty_file          = 2
                create_shlp_error   = 3
                activate_shlp_error = 4.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Search_help file not found' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Search_help file is empty' TYPE 'S'.
                RETURN.
              WHEN 3.
                MESSAGE 'Error creating search help' TYPE 'S'.
                RETURN.
              WHEN 4.
                MESSAGE 'Error activating search help' TYPE 'S'.
                RETURN.
            ENDCASE.
        ENDCASE.
      ENDLOOP.
    ENDIF.

    IF iv_p_fung EQ gc_abap_on.
      LOOP AT lt_index_csv ASSIGNING <lfs_index_csv>
        WHERE object_type EQ gc_object_type_function_group.
        CONCATENATE iv_dir '\' <lfs_index_csv>-file INTO lv_file.
        CASE <lfs_index_csv>-content_type.
          WHEN gc_content_type_attributes.
            lv_fungname = <lfs_index_csv>-object_name.
            CALL METHOD me->import_func_grp_attributes
              EXPORTING
                iv_fungname         = lv_fungname
                iv_file             = lv_file
              EXCEPTIONS
                open_file_error     = 1
                empty_file          = 2
                insert_record_error = 3.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Function group file not found' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Function group file is empty' TYPE 'S'.
                RETURN.
              WHEN 3.
                MESSAGE 'Error inserting into DB table' TYPE 'S'.
                RETURN.
            ENDCASE.
        ENDCASE.
      ENDLOOP.
    ENDIF.

    IF iv_p_func EQ gc_abap_on.
      LOOP AT lt_index_csv ASSIGNING <lfs_index_csv>
        WHERE object_type EQ gc_object_type_function.
        CONCATENATE iv_dir '\' <lfs_index_csv>-file INTO lv_file.
        CASE <lfs_index_csv>-content_type.
          WHEN gc_content_type_attributes.
            lv_funcname = <lfs_index_csv>-object_name.
            CALL METHOD me->import_function_attributes
              EXPORTING
                iv_funcname         = lv_funcname
                iv_file             = lv_file
              EXCEPTIONS
                open_file_error     = 1
                empty_file          = 2
                insert_record_error = 3.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Function file not found' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Function file is empty' TYPE 'S'.
                RETURN.
              WHEN 3.
                MESSAGE 'Error inserting into DB table' TYPE 'S'.
                RETURN.
            ENDCASE.

          WHEN gc_content_type_parameters.
            lv_funcname = <lfs_index_csv>-object_name.
            CALL METHOD me->import_function_parameters
              EXPORTING
                iv_funcname         = lv_funcname
                iv_file             = lv_file
              EXCEPTIONS
                open_file_error     = 1
                empty_file          = 2
                insert_record_error = 3.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Function file not found' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Function file is empty' TYPE 'S'.
                RETURN.
              WHEN 3.
                MESSAGE 'Error inserting into DB table' TYPE 'S'.
                RETURN.
            ENDCASE.
        ENDCASE.
      ENDLOOP.
    ENDIF.

    IF iv_p_prog EQ gc_abap_on.
      LOOP AT lt_index_csv ASSIGNING <lfs_index_csv>
        WHERE object_type EQ gc_object_type_program.
        CONCATENATE iv_dir '\' <lfs_index_csv>-file INTO lv_file.
        CASE <lfs_index_csv>-content_type.
          WHEN gc_content_type_attributes.
            lv_progname = <lfs_index_csv>-object_name.
            CALL METHOD me->import_program_attributes
              EXPORTING
                iv_progname          = lv_progname
                iv_file              = lv_file
              EXCEPTIONS
                open_file_error      = 1
                empty_file           = 2
                insert_record_error  = 3
                create_program_error = 4.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Program file not found' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Program file is empty' TYPE 'S'.
                RETURN.
              WHEN 3.
                MESSAGE 'Error inserting into DB table' TYPE 'S'.
                RETURN.
              WHEN 4.
                MESSAGE 'Error creating program' TYPE 'S'.
                RETURN.
            ENDCASE.
          WHEN gc_content_type_source_code.
            lv_progname = <lfs_index_csv>-object_name.
            CALL METHOD me->import_program_source_code
              EXPORTING
                iv_progname          = lv_progname
                iv_file              = lv_file
              EXCEPTIONS
                open_file_error      = 1
                empty_file           = 2
                create_program_error = 3.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Program file not found' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Program file is empty' TYPE 'S'.
                RETURN.
              WHEN 3.
                MESSAGE 'Error creating program' TYPE 'S'.
                RETURN.
            ENDCASE.
        ENDCASE.
      ENDLOOP.
    ENDIF.

    IF iv_p_tran EQ gc_abap_on.
      LOOP AT lt_index_csv ASSIGNING <lfs_index_csv>
        WHERE object_type EQ gc_object_type_transaction.
        CONCATENATE iv_dir '\' <lfs_index_csv>-file INTO lv_file.
        CASE <lfs_index_csv>-content_type.
          WHEN gc_content_type_attributes.
            lv_tcode = <lfs_index_csv>-object_name.
            CALL METHOD me->import_transaction_attributes
              EXPORTING
                iv_tcode            = lv_tcode
                iv_file             = lv_file
              EXCEPTIONS
                open_file_error     = 1
                empty_file          = 2
                insert_record_error = 3.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Transaction file not found' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Transaction file is empty' TYPE 'S'.
                RETURN.
              WHEN 3.
                MESSAGE 'Error inserting into DB table' TYPE 'S'.
                RETURN.
            ENDCASE.
        ENDCASE.
      ENDLOOP.

      COMMIT WORK AND WAIT.
    ENDIF.

    MESSAGE 'All done' TYPE 'S'.

  ENDMETHOD.

  METHOD import_domain_attributes.

    DATA: ls_dd01l           TYPE dd01l,
          ls_dd01t           TYPE dd01t,
          ls_tadir           TYPE tadir,
          lt_domain_attr_csv TYPE type_domain_attr_csv_t.

    FIELD-SYMBOLS: <lfs_domain_attr_csv> TYPE type_domain_attr_csv,
                   <lv_field>            TYPE any.

    DELETE FROM dd01l
     WHERE domname EQ iv_domname.

    DELETE FROM dd01t
     WHERE domname EQ iv_domname.

    DELETE FROM tadir
     WHERE pgmid EQ 'R3TR'
       AND object EQ 'DOMA'
       AND obj_name EQ iv_domname.

    CALL METHOD me->read_data_from_csv
      EXPORTING
        iv_file         = iv_file
      IMPORTING
        et_data         = lt_domain_attr_csv
      EXCEPTIONS
        open_file_error = 1
        empty_file      = 2.

    CASE sy-subrc.
      WHEN 1.
        RAISE open_file_error.
      WHEN 2.
        RAISE empty_file.
      WHEN OTHERS.
    ENDCASE.

    READ TABLE lt_domain_attr_csv ASSIGNING <lfs_domain_attr_csv> INDEX 1.
    IF sy-subrc IS NOT INITIAL.
      RAISE empty_file.
    ENDIF.

    ASSIGN COMPONENT 'DOMNAME' OF STRUCTURE ls_dd01l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_domname.
    ENDIF.
    ASSIGN COMPONENT 'AS4LOCAL' OF STRUCTURE ls_dd01l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'A'.
    ENDIF.
    ASSIGN COMPONENT 'AS4VERS' OF STRUCTURE ls_dd01l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = '0000'.
    ENDIF.
    ASSIGN COMPONENT 'DATATYPE' OF STRUCTURE ls_dd01l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_domain_attr_csv>-datatype.
    ENDIF.
    ASSIGN COMPONENT 'LENG' OF STRUCTURE ls_dd01l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_domain_attr_csv>-leng.
    ENDIF.
    ASSIGN COMPONENT 'OUTPUTLEN' OF STRUCTURE ls_dd01l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_domain_attr_csv>-outputlen.
    ENDIF.
    ASSIGN COMPONENT 'DECIMALS' OF STRUCTURE ls_dd01l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_domain_attr_csv>-decimals.
    ENDIF.
    ASSIGN COMPONENT 'LOWERCASE' OF STRUCTURE ls_dd01l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_domain_attr_csv>-lowercase.
    ENDIF.
    ASSIGN COMPONENT 'SIGNFLAG' OF STRUCTURE ls_dd01l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_domain_attr_csv>-signflag.
    ENDIF.
    ASSIGN COMPONENT 'AS4USER' OF STRUCTURE ls_dd01l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-uname.
    ENDIF.
    ASSIGN COMPONENT 'AS4DATE' OF STRUCTURE ls_dd01l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-datum.
    ENDIF.
    ASSIGN COMPONENT 'AS4TIME' OF STRUCTURE ls_dd01l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-uzeit.
    ENDIF.

    INSERT dd01l FROM ls_dd01l.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    ASSIGN COMPONENT 'DOMNAME' OF STRUCTURE ls_dd01t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_domname.
    ENDIF.
    ASSIGN COMPONENT 'DDLANGUAGE' OF STRUCTURE ls_dd01t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'EN'.
    ENDIF.
    ASSIGN COMPONENT 'AS4LOCAL' OF STRUCTURE ls_dd01t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'A'.
    ENDIF.
    ASSIGN COMPONENT 'AS4VERS' OF STRUCTURE ls_dd01t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = '0000'.
    ENDIF.
    ASSIGN COMPONENT 'DDTEXT' OF STRUCTURE ls_dd01t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_domain_attr_csv>-ddtext.
    ENDIF.

    INSERT dd01t FROM ls_dd01t.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    ASSIGN COMPONENT 'PGMID' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'R3TR'.
    ENDIF.
    ASSIGN COMPONENT 'OBJECT' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'DOMA'.
    ENDIF.
    ASSIGN COMPONENT 'OBJ_NAME' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_domname.
    ENDIF.
    ASSIGN COMPONENT 'SRCSYSTEM' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-sysid.
    ENDIF.
    ASSIGN COMPONENT 'AUTHOR' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-uname.
    ENDIF.
    ASSIGN COMPONENT 'DEVCLASS' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = me->mv_package.
    ENDIF.
    ASSIGN COMPONENT 'CPROJECT' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = ' L'.
    ENDIF.
    ASSIGN COMPONENT 'MASTERLANG' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'EN'.
    ENDIF.
    ASSIGN COMPONENT 'CREATED_ON' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-datum.
    ENDIF.
    ASSIGN COMPONENT 'CHECK_DATE' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-datum.
    ENDIF.

    INSERT tadir FROM ls_tadir.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

  ENDMETHOD.

  METHOD import_data_element_attributes.

    DATA: ls_dd04l                 TYPE dd04l,
          ls_dd04t                 TYPE dd04t,
          ls_ddtypes               TYPE ddtypes,
          ls_tadir                 TYPE tadir,
          lt_data_element_attr_csv TYPE type_data_element_attr_csv_t,
          lv_obj_name              TYPE e071-obj_name.

    FIELD-SYMBOLS: <lfs_data_element_attr_csv> TYPE type_data_element_attr_csv,
                   <lv_field>                  TYPE any.

    DELETE FROM dd04l
     WHERE rollname EQ iv_rollname.

    DELETE FROM dd04t
     WHERE rollname EQ iv_rollname.

    DELETE FROM ddtypes
     WHERE typename EQ iv_rollname
       AND typekind EQ 'DTEL'.

    DELETE FROM tadir
     WHERE pgmid EQ 'R3TR'
       AND object EQ 'DTEL'
       AND obj_name EQ iv_rollname.

    CALL METHOD me->read_data_from_csv
      EXPORTING
        iv_file         = iv_file
      IMPORTING
        et_data         = lt_data_element_attr_csv
      EXCEPTIONS
        open_file_error = 1
        empty_file      = 2.

    CASE sy-subrc.
      WHEN 1.
        RAISE open_file_error.
      WHEN 2.
        RAISE empty_file.
      WHEN OTHERS.
    ENDCASE.

    READ TABLE lt_data_element_attr_csv ASSIGNING <lfs_data_element_attr_csv> INDEX 1.
    IF sy-subrc IS NOT INITIAL.
      RAISE empty_file.
    ENDIF.

    ASSIGN COMPONENT 'ROLLNAME' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_rollname.
    ENDIF.
    ASSIGN COMPONENT 'AS4LOCAL' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'A'.
    ENDIF.
    ASSIGN COMPONENT 'AS4VERS' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = '0000'.
    ENDIF.
    ASSIGN COMPONENT 'HEADLEN' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_data_element_attr_csv>-headlen.
    ENDIF.
    ASSIGN COMPONENT 'SCRLEN1' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_data_element_attr_csv>-scrlen1.
    ENDIF.
    ASSIGN COMPONENT 'SCRLEN2' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_data_element_attr_csv>-scrlen2.
    ENDIF.
    ASSIGN COMPONENT 'SCRLEN3' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_data_element_attr_csv>-scrlen3.
    ENDIF.
    ASSIGN COMPONENT 'AS4USER' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-uname.
    ENDIF.
    ASSIGN COMPONENT 'AS4DATE' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-datum.
    ENDIF.
    ASSIGN COMPONENT 'AS4TIME' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-uzeit.
    ENDIF.
    ASSIGN COMPONENT 'DTELMASTER' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_data_element_attr_csv>-dtelmaster.
    ENDIF.
    ASSIGN COMPONENT 'DOMNAME' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_data_element_attr_csv>-domname.
    ENDIF.
    ASSIGN COMPONENT 'DATATYPE' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_data_element_attr_csv>-datatype.
    ENDIF.
    ASSIGN COMPONENT 'LENG' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_data_element_attr_csv>-leng.
    ENDIF.
    ASSIGN COMPONENT 'DECIMALS' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_data_element_attr_csv>-decimals.
    ENDIF.
    ASSIGN COMPONENT 'OUTPUTLEN' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_data_element_attr_csv>-outputlen.
    ENDIF.
    ASSIGN COMPONENT 'LOWERCASE' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_data_element_attr_csv>-lowercase.
    ENDIF.
    ASSIGN COMPONENT 'SIGNFLAG' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_data_element_attr_csv>-signflag.
    ENDIF.
    ASSIGN COMPONENT 'REFKIND' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_data_element_attr_csv>-refkind.
    ENDIF.

    INSERT dd04l FROM ls_dd04l.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    ASSIGN COMPONENT 'ROLLNAME' OF STRUCTURE ls_dd04t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_rollname.
    ENDIF.
    ASSIGN COMPONENT 'DDLANGUAGE' OF STRUCTURE ls_dd04t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'EN'.
    ENDIF.
    ASSIGN COMPONENT 'AS4LOCAL' OF STRUCTURE ls_dd04t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'A'.
    ENDIF.
    ASSIGN COMPONENT 'AS4VERS' OF STRUCTURE ls_dd04t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = '0000'.
    ENDIF.
    ASSIGN COMPONENT 'DDTEXT' OF STRUCTURE ls_dd04t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_data_element_attr_csv>-ddtext.
    ENDIF.
    ASSIGN COMPONENT 'REPTEXT' OF STRUCTURE ls_dd04t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_data_element_attr_csv>-reptext.
    ENDIF.
    ASSIGN COMPONENT 'SCRTEXT_S' OF STRUCTURE ls_dd04t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_data_element_attr_csv>-scrtext_s.
    ENDIF.
    ASSIGN COMPONENT 'SCRTEXT_M' OF STRUCTURE ls_dd04t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_data_element_attr_csv>-scrtext_m.
    ENDIF.
    ASSIGN COMPONENT 'SCRTEXT_L' OF STRUCTURE ls_dd04t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_data_element_attr_csv>-scrtext_l.
    ENDIF.

    INSERT dd04t FROM ls_dd04t.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    ASSIGN COMPONENT 'TYPENAME' OF STRUCTURE ls_ddtypes TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_rollname.
    ENDIF.
    ASSIGN COMPONENT 'STATE' OF STRUCTURE ls_ddtypes TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'A'.
    ENDIF.
    ASSIGN COMPONENT 'TYPEKIND' OF STRUCTURE ls_ddtypes TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'DTEL'.
    ENDIF.

    INSERT ddtypes FROM ls_ddtypes.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    ASSIGN COMPONENT 'PGMID' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'R3TR'.
    ENDIF.
    ASSIGN COMPONENT 'OBJECT' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'DTEL'.
    ENDIF.
    ASSIGN COMPONENT 'OBJ_NAME' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_rollname.
    ENDIF.
    ASSIGN COMPONENT 'SRCSYSTEM' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-sysid.
    ENDIF.
    ASSIGN COMPONENT 'AUTHOR' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-uname.
    ENDIF.
    ASSIGN COMPONENT 'DEVCLASS' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = me->mv_package.
    ENDIF.
    ASSIGN COMPONENT 'CPROJECT' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = ' L'.
    ENDIF.
    ASSIGN COMPONENT 'MASTERLANG' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'EN'.
    ENDIF.
    ASSIGN COMPONENT 'CREATED_ON' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-datum.
    ENDIF.
    ASSIGN COMPONENT 'CHECK_DATE' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-datum.
    ENDIF.

    INSERT tadir FROM ls_tadir.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    COMMIT WORK AND WAIT.

    lv_obj_name = iv_rollname.
    CALL FUNCTION 'RS_WORKING_OBJECT_ACTIVATE'
      EXPORTING
        object                     = 'DTEL'
        obj_name                   = lv_obj_name
        dictionary_only            = 'X'
        ui_decoupled               = 'X'
      EXCEPTIONS
        object_not_in_working_area = 1
        execution_error            = 2
        cancelled                  = 3
        insert_into_corr_error     = 4
        OTHERS                     = 5.

    IF sy-subrc IS NOT INITIAL.
      RAISE activate_type_error.
    ENDIF.

  ENDMETHOD.

  METHOD import_structure_attributes.

    DATA: ls_dd02l              TYPE dd02l,
          ls_dd02t              TYPE dd02t,
          ls_ddtypes            TYPE ddtypes,
          ls_tadir              TYPE tadir,
          lt_structure_attr_csv TYPE type_structure_attr_csv_t.

    FIELD-SYMBOLS: <lfs_structure_attr_csv> TYPE type_structure_attr_csv,
                   <lv_field>               TYPE any.

    DELETE FROM dd02l
     WHERE tabname EQ iv_tabname.

    DELETE FROM dd02t
     WHERE tabname EQ iv_tabname.

    DELETE FROM ddtypes
     WHERE typename EQ iv_tabname
       AND typekind EQ 'TABL'.

    DELETE FROM tadir
     WHERE pgmid EQ 'R3TR'
       AND object EQ 'TABL'
       AND obj_name EQ iv_tabname.

    CALL METHOD me->read_data_from_csv
      EXPORTING
        iv_file         = iv_file
      IMPORTING
        et_data         = lt_structure_attr_csv
      EXCEPTIONS
        open_file_error = 1
        empty_file      = 2.

    CASE sy-subrc.
      WHEN 1.
        RAISE open_file_error.
      WHEN 2.
        RAISE empty_file.
      WHEN OTHERS.
    ENDCASE.

    READ TABLE lt_structure_attr_csv ASSIGNING <lfs_structure_attr_csv> INDEX 1.
    IF sy-subrc IS NOT INITIAL.
      RAISE empty_file.
    ENDIF.

    ASSIGN COMPONENT 'TABNAME' OF STRUCTURE ls_dd02l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_tabname.
    ENDIF.
    ASSIGN COMPONENT 'AS4LOCAL' OF STRUCTURE ls_dd02l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'A'.
    ENDIF.
    ASSIGN COMPONENT 'AS4VERS' OF STRUCTURE ls_dd02l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = '0000'.
    ENDIF.
    ASSIGN COMPONENT 'TABCLASS' OF STRUCTURE ls_dd02l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_structure_attr_csv>-tabclass.
    ENDIF.
    ASSIGN COMPONENT 'AS4USER' OF STRUCTURE ls_dd02l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-uname.
    ENDIF.
    ASSIGN COMPONENT 'AS4DATE' OF STRUCTURE ls_dd02l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-datum.
    ENDIF.
    ASSIGN COMPONENT 'AS4TIME' OF STRUCTURE ls_dd02l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-uzeit.
    ENDIF.

    INSERT dd02l FROM ls_dd02l.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    ASSIGN COMPONENT 'TABNAME' OF STRUCTURE ls_dd02t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_tabname.
    ENDIF.
    ASSIGN COMPONENT 'DDLANGUAGE' OF STRUCTURE ls_dd02t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'EN'.
    ENDIF.
    ASSIGN COMPONENT 'AS4LOCAL' OF STRUCTURE ls_dd02t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'A'.
    ENDIF.
    ASSIGN COMPONENT 'AS4VERS' OF STRUCTURE ls_dd02t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = '0000'.
    ENDIF.
    ASSIGN COMPONENT 'DDTEXT' OF STRUCTURE ls_dd02t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_structure_attr_csv>-ddtext.
    ENDIF.

    INSERT dd02t FROM ls_dd02t.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    ASSIGN COMPONENT 'TYPENAME' OF STRUCTURE ls_ddtypes TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_tabname.
    ENDIF.
    ASSIGN COMPONENT 'STATE' OF STRUCTURE ls_ddtypes TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'A'.
    ENDIF.
    ASSIGN COMPONENT 'TYPEKIND' OF STRUCTURE ls_ddtypes TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'TABL'.
    ENDIF.

    INSERT ddtypes FROM ls_ddtypes.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    ASSIGN COMPONENT 'PGMID' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'R3TR'.
    ENDIF.
    ASSIGN COMPONENT 'OBJECT' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'TABL'.
    ENDIF.
    ASSIGN COMPONENT 'OBJ_NAME' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_tabname.
    ENDIF.
    ASSIGN COMPONENT 'SRCSYSTEM' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-sysid.
    ENDIF.
    ASSIGN COMPONENT 'AUTHOR' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-uname.
    ENDIF.
    ASSIGN COMPONENT 'DEVCLASS' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = me->mv_package.
    ENDIF.
    ASSIGN COMPONENT 'CPROJECT' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = ' L'.
    ENDIF.
    ASSIGN COMPONENT 'MASTERLANG' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'EN'.
    ENDIF.
    ASSIGN COMPONENT 'CREATED_ON' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-datum.
    ENDIF.
    ASSIGN COMPONENT 'CHECK_DATE' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-datum.
    ENDIF.

    INSERT tadir FROM ls_tadir.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    COMMIT WORK AND WAIT.

  ENDMETHOD.

  METHOD import_structure_fields.

    DATA: ls_dd03l                TYPE dd03l,
          ls_dd03t                TYPE dd03t,
          lt_structure_fields_csv TYPE type_structure_fields_csv_t,
          lv_obj_name             TYPE e071-obj_name.

    FIELD-SYMBOLS: <lfs_structure_fields_csv> TYPE type_structure_fields_csv,
                   <lv_field>                 TYPE any.

    DELETE FROM dd03l
     WHERE tabname = iv_tabname.

    DELETE FROM dd03t
     WHERE tabname = iv_tabname.

    CALL METHOD me->read_data_from_csv
      EXPORTING
        iv_file         = iv_file
      IMPORTING
        et_data         = lt_structure_fields_csv
      EXCEPTIONS
        open_file_error = 1
        empty_file      = 2.

    CASE sy-subrc.
      WHEN 1.
        RAISE open_file_error.
      WHEN 2.
        RAISE empty_file.
      WHEN OTHERS.
    ENDCASE.

    READ TABLE lt_structure_fields_csv ASSIGNING <lfs_structure_fields_csv> INDEX 1.
    IF sy-subrc IS NOT INITIAL.
      RAISE empty_file.
    ENDIF.

    LOOP AT lt_structure_fields_csv ASSIGNING <lfs_structure_fields_csv>.
      ASSIGN COMPONENT 'TABNAME' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = iv_tabname.
      ENDIF.
      ASSIGN COMPONENT 'FIELDNAME' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_structure_fields_csv>-fieldname.
      ENDIF.
      ASSIGN COMPONENT 'AS4LOCAL' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = 'A'.
      ENDIF.
      ASSIGN COMPONENT 'AS4VERS' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = '0000'.
      ENDIF.
      ASSIGN COMPONENT 'POSITION' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_structure_fields_csv>-position.
      ENDIF.
      ASSIGN COMPONENT 'ROLLNAME' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_structure_fields_csv>-rollname.
      ENDIF.
      ASSIGN COMPONENT 'ADMINFIELD' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_structure_fields_csv>-adminfield.
      ENDIF.
      ASSIGN COMPONENT 'INTTYPE' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_structure_fields_csv>-inttype.
      ENDIF.
      ASSIGN COMPONENT 'INTLEN' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_structure_fields_csv>-intlen.
      ENDIF.
      ASSIGN COMPONENT 'DATATYPE' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_structure_fields_csv>-datatype.
      ENDIF.
      ASSIGN COMPONENT 'LENG' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_structure_fields_csv>-leng.
      ENDIF.
      ASSIGN COMPONENT 'DECIMALS' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_structure_fields_csv>-decimals.
      ENDIF.
      ASSIGN COMPONENT 'DOMNAME' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_structure_fields_csv>-domname.
      ENDIF.
      ASSIGN COMPONENT 'COMPTYPE' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_structure_fields_csv>-comptype.
      ENDIF.

      INSERT dd03l FROM ls_dd03l.
      IF sy-subrc IS NOT INITIAL.
        RAISE insert_record_error.
      ENDIF.

      IF <lfs_structure_fields_csv>-comptype IS INITIAL.
        ASSIGN COMPONENT 'TABNAME' OF STRUCTURE ls_dd03t TO <lv_field>.
        IF sy-subrc IS INITIAL.
          <lv_field> = iv_tabname.
        ENDIF.
        ASSIGN COMPONENT 'DDLANGUAGE' OF STRUCTURE ls_dd03t TO <lv_field>.
        IF sy-subrc IS INITIAL.
          <lv_field> = 'EN'.
        ENDIF.
        ASSIGN COMPONENT 'AS4LOCAL' OF STRUCTURE ls_dd03t TO <lv_field>.
        IF sy-subrc IS INITIAL.
          <lv_field> = 'A'.
        ENDIF.
        ASSIGN COMPONENT 'FIELDNAME' OF STRUCTURE ls_dd03t TO <lv_field>.
        IF sy-subrc IS INITIAL.
          <lv_field> = <lfs_structure_fields_csv>-fieldname.
        ENDIF.
        ASSIGN COMPONENT 'DDTEXT' OF STRUCTURE ls_dd03t TO <lv_field>.
        IF sy-subrc IS INITIAL.
          <lv_field> = <lfs_structure_fields_csv>-ddtext.
        ENDIF.

        INSERT dd03t FROM ls_dd03t.
        IF sy-subrc IS NOT INITIAL.
          RAISE insert_record_error.
        ENDIF.
      ENDIF.
    ENDLOOP.

    COMMIT WORK AND WAIT.

    lv_obj_name = iv_tabname.
    CALL FUNCTION 'RS_WORKING_OBJECT_ACTIVATE'
      EXPORTING
        object                     = 'TABL'
        obj_name                   = lv_obj_name
        dictionary_only            = 'X'
        ui_decoupled               = 'X'
      EXCEPTIONS
        object_not_in_working_area = 1
        execution_error            = 2
        cancelled                  = 3
        insert_into_corr_error     = 4
        OTHERS                     = 5.

    IF sy-subrc IS NOT INITIAL.
      RAISE activate_type_error.
    ENDIF.

  ENDMETHOD.

  METHOD import_table_type_attributes.

    DATA: ls_dd40l               TYPE dd40l,
          ls_dd40t               TYPE dd40t,
          ls_ddtypes             TYPE ddtypes,
          ls_tadir               TYPE tadir,
          lt_table_type_attr_csv TYPE type_table_type_attr_csv_t,
          lv_obj_name            TYPE e071-obj_name.

    FIELD-SYMBOLS: <lfs_table_type_attr_csv> TYPE type_table_type_attr_csv,
                   <lv_field>                TYPE any.

    DELETE FROM dd40l
     WHERE typename EQ iv_typename.

    DELETE FROM dd40t
     WHERE typename EQ iv_typename.

    DELETE FROM ddtypes
     WHERE typename EQ iv_typename
       AND typekind EQ 'TTYP'.

    DELETE FROM tadir
     WHERE pgmid EQ 'R3TR'
       AND object EQ 'TTYP'
       AND obj_name EQ iv_typename.

    CALL METHOD me->read_data_from_csv
      EXPORTING
        iv_file         = iv_file
      IMPORTING
        et_data         = lt_table_type_attr_csv
      EXCEPTIONS
        open_file_error = 1
        empty_file      = 2.

    CASE sy-subrc.
      WHEN 1.
        RAISE open_file_error.
      WHEN 2.
        RAISE empty_file.
      WHEN OTHERS.
    ENDCASE.

    READ TABLE lt_table_type_attr_csv ASSIGNING <lfs_table_type_attr_csv> INDEX 1.
    IF sy-subrc IS NOT INITIAL.
      RAISE empty_file.
    ENDIF.

    ASSIGN COMPONENT 'TYPENAME' OF STRUCTURE ls_dd40l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_typename.
    ENDIF.
    ASSIGN COMPONENT 'AS4LOCAL' OF STRUCTURE ls_dd40l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'A'.
    ENDIF.
    ASSIGN COMPONENT 'ROWTYPE' OF STRUCTURE ls_dd40l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_table_type_attr_csv>-rowtype.
    ENDIF.
    ASSIGN COMPONENT 'ROWKIND' OF STRUCTURE ls_dd40l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_table_type_attr_csv>-rowkind.
    ENDIF.
    ASSIGN COMPONENT 'DATATYPE' OF STRUCTURE ls_dd40l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_table_type_attr_csv>-datatype.
    ENDIF.
    ASSIGN COMPONENT 'ACCESSMODE' OF STRUCTURE ls_dd40l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_table_type_attr_csv>-accessmode.
    ENDIF.
    ASSIGN COMPONENT 'KEYDEF' OF STRUCTURE ls_dd40l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_table_type_attr_csv>-keydef.
    ENDIF.
    ASSIGN COMPONENT 'KEYKIND' OF STRUCTURE ls_dd40l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_table_type_attr_csv>-keykind.
    ENDIF.
    ASSIGN COMPONENT 'TYPELEN' OF STRUCTURE ls_dd40l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_table_type_attr_csv>-typelen.
    ENDIF.
    ASSIGN COMPONENT 'AS4USER' OF STRUCTURE ls_dd40l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-uname.
    ENDIF.
    ASSIGN COMPONENT 'AS4DATE' OF STRUCTURE ls_dd40l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-datum.
    ENDIF.
    ASSIGN COMPONENT 'AS4TIME' OF STRUCTURE ls_dd40l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-uzeit.
    ENDIF.

    INSERT dd40l FROM ls_dd40l.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    ASSIGN COMPONENT 'TYPENAME' OF STRUCTURE ls_dd40t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_typename.
    ENDIF.
    ASSIGN COMPONENT 'DDLANGUAGE' OF STRUCTURE ls_dd40t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'EN'.
    ENDIF.
    ASSIGN COMPONENT 'AS4LOCAL' OF STRUCTURE ls_dd40t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'A'.
    ENDIF.
    ASSIGN COMPONENT 'DDTEXT' OF STRUCTURE ls_dd40t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_table_type_attr_csv>-ddtext.
    ENDIF.

    INSERT dd40t FROM ls_dd40t.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    ASSIGN COMPONENT 'TYPENAME' OF STRUCTURE ls_ddtypes TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_typename.
    ENDIF.
    ASSIGN COMPONENT 'STATE' OF STRUCTURE ls_ddtypes TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'A'.
    ENDIF.
    ASSIGN COMPONENT 'TYPEKIND' OF STRUCTURE ls_ddtypes TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'TTYP'.
    ENDIF.

    INSERT ddtypes FROM ls_ddtypes.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    ASSIGN COMPONENT 'PGMID' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'R3TR'.
    ENDIF.
    ASSIGN COMPONENT 'OBJECT' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'TTYP'.
    ENDIF.
    ASSIGN COMPONENT 'OBJ_NAME' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_typename.
    ENDIF.
    ASSIGN COMPONENT 'SRCSYSTEM' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-sysid.
    ENDIF.
    ASSIGN COMPONENT 'AUTHOR' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-uname.
    ENDIF.
    ASSIGN COMPONENT 'DEVCLASS' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = me->mv_package.
    ENDIF.
    ASSIGN COMPONENT 'CPROJECT' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = ' L'.
    ENDIF.
    ASSIGN COMPONENT 'MASTERLANG' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'EN'.
    ENDIF.
    ASSIGN COMPONENT 'CREATED_ON' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-datum.
    ENDIF.
    ASSIGN COMPONENT 'CHECK_DATE' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-datum.
    ENDIF.

    INSERT tadir FROM ls_tadir.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    COMMIT WORK AND WAIT.

    lv_obj_name = iv_typename.
    CALL FUNCTION 'RS_WORKING_OBJECT_ACTIVATE'
      EXPORTING
        object                     = 'TTYP'
        obj_name                   = lv_obj_name
        dictionary_only            = 'X'
        ui_decoupled               = 'X'
      EXCEPTIONS
        object_not_in_working_area = 1
        execution_error            = 2
        cancelled                  = 3
        insert_into_corr_error     = 4
        OTHERS                     = 5.

    IF sy-subrc IS NOT INITIAL.
      RAISE activate_type_error.
    ENDIF.

  ENDMETHOD.

  METHOD import_transp_table_attributes.

    DATA: ls_dd02l                 TYPE dd02l,
          ls_dd02t                 TYPE dd02t,
          ls_dd09l                 TYPE dd09l,
          ls_ddtypes               TYPE ddtypes,
          ls_tadir                 TYPE tadir,
          lt_transp_table_attr_csv TYPE type_transp_table_attr_csv_t.

    FIELD-SYMBOLS: <lfs_transp_table_attr_csv> TYPE type_transp_table_attr_csv,
                   <lv_field>                  TYPE any.

    CALL METHOD me->read_data_from_csv
      EXPORTING
        iv_file         = iv_file
      IMPORTING
        et_data         = lt_transp_table_attr_csv
      EXCEPTIONS
        open_file_error = 1
        empty_file      = 2.

    CASE sy-subrc.
      WHEN 1.
        RAISE open_file_error.
      WHEN 2.
        RAISE empty_file.
      WHEN OTHERS.
    ENDCASE.

    READ TABLE lt_transp_table_attr_csv ASSIGNING <lfs_transp_table_attr_csv> INDEX 1.
    IF sy-subrc IS NOT INITIAL.
      RAISE empty_file.
    ENDIF.

    SELECT SINGLE *
      FROM dd02l
      INTO ls_dd02l
     WHERE tabname EQ iv_tabname.

    IF sy-subrc IS INITIAL.
      TRY.
          DELETE FROM (iv_tabname).
        CATCH cx_sy_dynamic_osql_semantics.
      ENDTRY.

      CALL METHOD delete_transparent_table
        EXPORTING
          iv_tabname   = iv_tabname
        EXCEPTIONS
          delete_error = 1.

      IF sy-subrc EQ 1.
        RAISE delete_table_error.
      ENDIF.

      DELETE FROM tadir
       WHERE pgmid EQ 'R3TR'
         AND object EQ 'TABL'
         AND obj_name EQ iv_tabname.
    ENDIF.

    ASSIGN COMPONENT 'TABNAME' OF STRUCTURE ls_dd02l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_tabname.
    ENDIF.
    ASSIGN COMPONENT 'AS4LOCAL' OF STRUCTURE ls_dd02l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'N'.
    ENDIF.
    ASSIGN COMPONENT 'AS4VERS' OF STRUCTURE ls_dd02l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = '0000'.
    ENDIF.
    ASSIGN COMPONENT 'TABCLASS' OF STRUCTURE ls_dd02l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_transp_table_attr_csv>-tabclass.
    ENDIF.
    ASSIGN COMPONENT 'CLIDEP' OF STRUCTURE ls_dd02l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_transp_table_attr_csv>-clidep.
    ENDIF.
    ASSIGN COMPONENT 'AS4USER' OF STRUCTURE ls_dd02l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-uname.
    ENDIF.
    ASSIGN COMPONENT 'AS4DATE' OF STRUCTURE ls_dd02l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-datum.
    ENDIF.
    ASSIGN COMPONENT 'AS4TIME' OF STRUCTURE ls_dd02l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-uzeit.
    ENDIF.
    ASSIGN COMPONENT 'MAINFLAG' OF STRUCTURE ls_dd02l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_transp_table_attr_csv>-mainflag.
    ENDIF.
    ASSIGN COMPONENT 'CONTFLAG' OF STRUCTURE ls_dd02l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_transp_table_attr_csv>-contflag.
    ENDIF.

    INSERT dd02l FROM ls_dd02l.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    ASSIGN COMPONENT 'TABNAME' OF STRUCTURE ls_dd02t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_tabname.
    ENDIF.
    ASSIGN COMPONENT 'DDLANGUAGE' OF STRUCTURE ls_dd02t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'EN'.
    ENDIF.
    ASSIGN COMPONENT 'AS4LOCAL' OF STRUCTURE ls_dd02t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'N'.
    ENDIF.
    ASSIGN COMPONENT 'AS4VERS' OF STRUCTURE ls_dd02t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = '0000'.
    ENDIF.
    ASSIGN COMPONENT 'DDTEXT' OF STRUCTURE ls_dd02t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_transp_table_attr_csv>-ddtext.
    ENDIF.

    INSERT dd02t FROM ls_dd02t.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    ASSIGN COMPONENT 'TABNAME' OF STRUCTURE ls_dd09l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_tabname.
    ENDIF.
    ASSIGN COMPONENT 'AS4LOCAL' OF STRUCTURE ls_dd09l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'N'.
    ENDIF.
    ASSIGN COMPONENT 'AS4VERS' OF STRUCTURE ls_dd09l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = '0000'.
    ENDIF.
    ASSIGN COMPONENT 'TABKAT' OF STRUCTURE ls_dd09l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_transp_table_attr_csv>-tabkat.
    ENDIF.
    ASSIGN COMPONENT 'TABART' OF STRUCTURE ls_dd09l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_transp_table_attr_csv>-tabart.
    ENDIF.
    ASSIGN COMPONENT 'AS4USER' OF STRUCTURE ls_dd09l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-uname.
    ENDIF.
    ASSIGN COMPONENT 'AS4DATE' OF STRUCTURE ls_dd09l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-datum.
    ENDIF.
    ASSIGN COMPONENT 'AS4TIME' OF STRUCTURE ls_dd09l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-uzeit.
    ENDIF.
    ASSIGN COMPONENT 'BUFALLOW' OF STRUCTURE ls_dd09l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_transp_table_attr_csv>-bufallow.
    ENDIF.

    INSERT dd09l FROM ls_dd09l.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    ASSIGN COMPONENT 'TYPENAME' OF STRUCTURE ls_ddtypes TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_tabname.
    ENDIF.
    ASSIGN COMPONENT 'STATE' OF STRUCTURE ls_ddtypes TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'N'.
    ENDIF.
    ASSIGN COMPONENT 'TYPEKIND' OF STRUCTURE ls_ddtypes TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'TABL'.
    ENDIF.

    INSERT ddtypes FROM ls_ddtypes.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    ASSIGN COMPONENT 'PGMID' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'R3TR'.
    ENDIF.
    ASSIGN COMPONENT 'OBJECT' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'TABL'.
    ENDIF.
    ASSIGN COMPONENT 'OBJ_NAME' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_tabname.
    ENDIF.
    ASSIGN COMPONENT 'SRCSYSTEM' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-sysid.
    ENDIF.
    ASSIGN COMPONENT 'AUTHOR' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-uname.
    ENDIF.
    ASSIGN COMPONENT 'DEVCLASS' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = me->mv_package.
    ENDIF.
    ASSIGN COMPONENT 'CPROJECT' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = ' L'.
    ENDIF.
    ASSIGN COMPONENT 'MASTERLANG' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'EN'.
    ENDIF.
    ASSIGN COMPONENT 'CREATED_ON' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-datum.
    ENDIF.
    ASSIGN COMPONENT 'CHECK_DATE' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-datum.
    ENDIF.

    INSERT tadir FROM ls_tadir.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    COMMIT WORK AND WAIT.

  ENDMETHOD.

  METHOD import_transp_table_fields.

    DATA: ls_dd03l                   TYPE dd03l,
          ls_dd03t                   TYPE dd03t,
          lt_transp_table_fields_csv TYPE type_transp_table_fields_csv_t.

    FIELD-SYMBOLS: <lfs_transp_table_fields_csv> TYPE type_transp_table_fields_csv,
                   <lv_field>                    TYPE any.

    CALL METHOD me->read_data_from_csv
      EXPORTING
        iv_file         = iv_file
      IMPORTING
        et_data         = lt_transp_table_fields_csv
      EXCEPTIONS
        open_file_error = 1
        empty_file      = 2.

    CASE sy-subrc.
      WHEN 1.
        RAISE open_file_error.
      WHEN 2.
        RAISE empty_file.
      WHEN OTHERS.
    ENDCASE.

    READ TABLE lt_transp_table_fields_csv ASSIGNING <lfs_transp_table_fields_csv> INDEX 1.
    IF sy-subrc IS NOT INITIAL.
      RAISE empty_file.
    ENDIF.

    LOOP AT lt_transp_table_fields_csv ASSIGNING <lfs_transp_table_fields_csv>.
      ASSIGN COMPONENT 'TABNAME' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = iv_tabname.
      ENDIF.
      ASSIGN COMPONENT 'FIELDNAME' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_transp_table_fields_csv>-fieldname.
      ENDIF.
      ASSIGN COMPONENT 'AS4LOCAL' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = 'N'.
      ENDIF.
      ASSIGN COMPONENT 'AS4VERS' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = '0000'.
      ENDIF.
      ASSIGN COMPONENT 'POSITION' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_transp_table_fields_csv>-position.
      ENDIF.
      ASSIGN COMPONENT 'KEYFLAG' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_transp_table_fields_csv>-keyflag.
      ENDIF.
      ASSIGN COMPONENT 'ROLLNAME' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_transp_table_fields_csv>-rollname.
      ENDIF.
      ASSIGN COMPONENT 'ADMINFIELD' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_transp_table_fields_csv>-adminfield.
      ENDIF.
      ASSIGN COMPONENT 'INTTYPE' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_transp_table_fields_csv>-inttype.
      ENDIF.
      ASSIGN COMPONENT 'INTLEN' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_transp_table_fields_csv>-intlen.
      ENDIF.
      ASSIGN COMPONENT 'NOTNULL' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_transp_table_fields_csv>-notnull.
      ENDIF.
      ASSIGN COMPONENT 'DATATYPE' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_transp_table_fields_csv>-datatype.
      ENDIF.
      ASSIGN COMPONENT 'LENG' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_transp_table_fields_csv>-leng.
      ENDIF.
      ASSIGN COMPONENT 'DECIMALS' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_transp_table_fields_csv>-decimals.
      ENDIF.
      ASSIGN COMPONENT 'DOMNAME' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_transp_table_fields_csv>-domname.
      ENDIF.
      ASSIGN COMPONENT 'COMPTYPE' OF STRUCTURE ls_dd03l TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_transp_table_fields_csv>-comptype.
      ENDIF.

      INSERT dd03l FROM ls_dd03l.
      IF sy-subrc IS NOT INITIAL.
        RAISE insert_record_error.
      ENDIF.

      IF <lfs_transp_table_fields_csv>-comptype IS INITIAL.
        ASSIGN COMPONENT 'TABNAME' OF STRUCTURE ls_dd03t TO <lv_field>.
        IF sy-subrc IS INITIAL.
          <lv_field> = iv_tabname.
        ENDIF.
        ASSIGN COMPONENT 'DDLANGUAGE' OF STRUCTURE ls_dd03t TO <lv_field>.
        IF sy-subrc IS INITIAL.
          <lv_field> = 'EN'.
        ENDIF.
        ASSIGN COMPONENT 'AS4LOCAL' OF STRUCTURE ls_dd03t TO <lv_field>.
        IF sy-subrc IS INITIAL.
          <lv_field> = 'N'.
        ENDIF.
        ASSIGN COMPONENT 'FIELDNAME' OF STRUCTURE ls_dd03t TO <lv_field>.
        IF sy-subrc IS INITIAL.
          <lv_field> = <lfs_transp_table_fields_csv>-fieldname.
        ENDIF.
        ASSIGN COMPONENT 'DDTEXT' OF STRUCTURE ls_dd03t TO <lv_field>.
        IF sy-subrc IS INITIAL.
          <lv_field> = <lfs_transp_table_fields_csv>-ddtext.
        ENDIF.

        INSERT dd03t FROM ls_dd03t.
        IF sy-subrc IS NOT INITIAL.
          RAISE insert_record_error.
        ENDIF.
      ENDIF.
    ENDLOOP.

    COMMIT WORK AND WAIT.

    CALL METHOD activate_transparent_table
      EXPORTING
        iv_tabname     = iv_tabname
      EXCEPTIONS
        activate_error = 1.

    IF sy-subrc EQ 1.
      RAISE activate_table_error.
    ENDIF.

  ENDMETHOD.

  METHOD import_transp_table_data.

    DATA: lo_typedescr   TYPE REF TO cl_abap_typedescr,
          lo_structdescr TYPE REF TO cl_abap_structdescr,
          lo_tabledescr  TYPE REF TO cl_abap_tabledescr,
          lo_data        TYPE REF TO data.

    FIELD-SYMBOLS: <lfs_transp_table_data_csv> TYPE table,
                   <lfs_line>                  TYPE any,
                   <lfs_field>                 TYPE any.

    CALL METHOD cl_abap_structdescr=>describe_by_name
      EXPORTING
        p_name      = iv_tabname
      RECEIVING
        p_descr_ref = lo_typedescr.

    lo_structdescr ?= lo_typedescr.

    CALL METHOD cl_abap_tabledescr=>create
      EXPORTING
        p_line_type = lo_structdescr
      RECEIVING
        p_result    = lo_tabledescr.

    CREATE DATA lo_data TYPE HANDLE lo_tabledescr.
    ASSIGN lo_data->* TO <lfs_transp_table_data_csv>.

    CALL METHOD me->read_data_from_csv
      EXPORTING
        iv_file         = iv_file
      IMPORTING
        et_data         = <lfs_transp_table_data_csv>
      EXCEPTIONS
        open_file_error = 1
        empty_file      = 2.

    CASE sy-subrc.
      WHEN 1.
        RAISE open_file_error.
    ENDCASE.

    LOOP AT <lfs_transp_table_data_csv> ASSIGNING <lfs_line>.
      ASSIGN COMPONENT 'MANDT' OF STRUCTURE <lfs_line> TO <lfs_field>.
      CHECK sy-subrc IS INITIAL.
      <lfs_field> = sy-mandt.
    ENDLOOP.

    INSERT (iv_tabname) FROM TABLE <lfs_transp_table_data_csv>.

    COMMIT WORK AND WAIT.

  ENDMETHOD.

  METHOD delete_transparent_table.

    DATA: lt_bdcdata  TYPE TABLE OF bdcdata,
          lt_messages TYPE TABLE OF bdcmsgcoll.

    FIELD-SYMBOLS: <lfs_bdcdata> TYPE bdcdata,
                   <lt_messages> TYPE bdcmsgcoll.

    APPEND INITIAL LINE TO lt_bdcdata ASSIGNING <lfs_bdcdata>.
    <lfs_bdcdata>-program = 'SAPLSD_ENTRY'.
    <lfs_bdcdata>-dynpro = '1000'.
    <lfs_bdcdata>-dynbegin = 'X'.
    APPEND INITIAL LINE TO lt_bdcdata ASSIGNING <lfs_bdcdata>.
    <lfs_bdcdata>-fnam = 'BDC_CURSOR'.
    <lfs_bdcdata>-fval = 'RSRD1-TBMA_VAL'.
    APPEND INITIAL LINE TO lt_bdcdata ASSIGNING <lfs_bdcdata>.
    <lfs_bdcdata>-fnam = 'BDC_OKCODE'.
    <lfs_bdcdata>-fval = '=WB_DELETE'.
    APPEND INITIAL LINE TO lt_bdcdata ASSIGNING <lfs_bdcdata>.
    <lfs_bdcdata>-fnam = 'RSRD1-TBMA'.
    <lfs_bdcdata>-fval = 'X'.
    APPEND INITIAL LINE TO lt_bdcdata ASSIGNING <lfs_bdcdata>.
    <lfs_bdcdata>-fnam = 'RSRD1-TBMA_VAL'.
    <lfs_bdcdata>-fval = iv_tabname.

    APPEND INITIAL LINE TO lt_bdcdata ASSIGNING <lfs_bdcdata>.
    <lfs_bdcdata>-program = 'SAPLSPO1'.
    <lfs_bdcdata>-dynpro = '0100'.
    <lfs_bdcdata>-dynbegin = 'X'.
    APPEND INITIAL LINE TO lt_bdcdata ASSIGNING <lfs_bdcdata>.
    <lfs_bdcdata>-fnam = 'BDC_OKCODE'.
    <lfs_bdcdata>-fval = '=YES'.

    APPEND INITIAL LINE TO lt_bdcdata ASSIGNING <lfs_bdcdata>.
    <lfs_bdcdata>-program = 'SAPLSD_ENTRY'.
    <lfs_bdcdata>-dynpro = '1000'.
    <lfs_bdcdata>-dynbegin = 'X'.
    APPEND INITIAL LINE TO lt_bdcdata ASSIGNING <lfs_bdcdata>.
    <lfs_bdcdata>-fnam = 'BDC_CURSOR'.
    <lfs_bdcdata>-fval = 'RSRD1-TBMA_VAL'.
    <lfs_bdcdata>-fnam = 'BDC_OKCODE'.
    <lfs_bdcdata>-fval = '=WB_BACK'.

    CALL TRANSACTION 'SE11' USING lt_bdcdata MODE 'N' UPDATE 'S' MESSAGES INTO lt_messages.

    READ TABLE lt_messages ASSIGNING <lt_messages>
    WITH KEY msgid = 'AD'
             msgnr = '033'
             msgtyp = 'S'.
    IF sy-subrc IS NOT INITIAL.
      RAISE delete_error.
    ENDIF.

  ENDMETHOD.

  METHOD activate_transparent_table.

    DATA: lt_bdcdata  TYPE TABLE OF bdcdata,
          ls_options  TYPE ctu_params,
          lt_messages TYPE TABLE OF bdcmsgcoll.

    FIELD-SYMBOLS: <lfs_bdcdata> TYPE bdcdata,
                   <lt_messages> TYPE bdcmsgcoll.

    APPEND INITIAL LINE TO lt_bdcdata ASSIGNING <lfs_bdcdata>.
    <lfs_bdcdata>-program = 'SAPLSD_ENTRY'.
    <lfs_bdcdata>-dynpro = '1000'.
    <lfs_bdcdata>-dynbegin = 'X'.
    APPEND INITIAL LINE TO lt_bdcdata ASSIGNING <lfs_bdcdata>.
    <lfs_bdcdata>-fnam = 'BDC_CURSOR'.
    <lfs_bdcdata>-fval = 'RSRD1-TBMA_VAL'.
    APPEND INITIAL LINE TO lt_bdcdata ASSIGNING <lfs_bdcdata>.
    <lfs_bdcdata>-fnam = 'BDC_OKCODE'.
    <lfs_bdcdata>-fval = '=WB_ACTIVATE'.
    APPEND INITIAL LINE TO lt_bdcdata ASSIGNING <lfs_bdcdata>.
    <lfs_bdcdata>-fnam = 'RSRD1-TBMA'.
    <lfs_bdcdata>-fval = 'X'.
    APPEND INITIAL LINE TO lt_bdcdata ASSIGNING <lfs_bdcdata>.
    <lfs_bdcdata>-fnam = 'RSRD1-TBMA_VAL'.
    <lfs_bdcdata>-fval = iv_tabname.

    APPEND INITIAL LINE TO lt_bdcdata ASSIGNING <lfs_bdcdata>.
    <lfs_bdcdata>-program = 'SAPLSPO1'.
    <lfs_bdcdata>-dynpro = '0300'.
    <lfs_bdcdata>-dynbegin = 'X'.
    APPEND INITIAL LINE TO lt_bdcdata ASSIGNING <lfs_bdcdata>.
    <lfs_bdcdata>-fnam = 'BDC_OKCODE'.
    <lfs_bdcdata>-fval = '=NO'.

    APPEND INITIAL LINE TO lt_bdcdata ASSIGNING <lfs_bdcdata>.
    <lfs_bdcdata>-program = 'SAPLSD_ENTRY'.
    <lfs_bdcdata>-dynpro = '1000'.
    <lfs_bdcdata>-dynbegin = 'X'.
    APPEND INITIAL LINE TO lt_bdcdata ASSIGNING <lfs_bdcdata>.
    <lfs_bdcdata>-fnam = 'BDC_CURSOR'.
    <lfs_bdcdata>-fval = 'RSRD1-TBMA_VAL'.
    <lfs_bdcdata>-fnam = 'BDC_OKCODE'.
    <lfs_bdcdata>-fval = '=WB_BACK'.

    ls_options-dismode = 'N'.
    ls_options-updmode = 'S'.
    ls_options-defsize = gc_abap_on.
    ls_options-racommit = gc_abap_on.

    CALL TRANSACTION 'SE11' USING lt_bdcdata OPTIONS FROM ls_options MESSAGES INTO lt_messages.

    READ TABLE lt_messages ASSIGNING <lt_messages>
    WITH KEY msgid = 'EU'
             msgnr = '828'
             msgtyp = 'S'.
    IF sy-subrc IS NOT INITIAL.
      RAISE activate_error.
    ENDIF.

  ENDMETHOD.

  METHOD import_mess_class_attributes.

    DATA: ls_t100a               TYPE t100a,
          ls_t100t               TYPE t100t,
          ls_tadir               TYPE tadir,
          lt_mess_class_attr_csv TYPE type_mess_class_attr_csv_t.

    FIELD-SYMBOLS: <lfs_mess_class_attr_csv> TYPE type_mess_class_attr_csv,
                   <lv_field>                TYPE any.

    DELETE FROM t100a
     WHERE arbgb = iv_mcname.

    DELETE FROM t100t
     WHERE arbgb = iv_mcname.

    DELETE FROM tadir
     WHERE pgmid EQ 'R3TR'
       AND object EQ 'MSAG'
       AND obj_name EQ iv_mcname.

    CALL METHOD me->read_data_from_csv
      EXPORTING
        iv_file         = iv_file
      IMPORTING
        et_data         = lt_mess_class_attr_csv
      EXCEPTIONS
        open_file_error = 1
        empty_file      = 2.

    CASE sy-subrc.
      WHEN 1.
        RAISE open_file_error.
      WHEN 2.
        RAISE empty_file.
      WHEN OTHERS.
    ENDCASE.

    READ TABLE lt_mess_class_attr_csv ASSIGNING <lfs_mess_class_attr_csv> INDEX 1.
    IF sy-subrc IS NOT INITIAL.
      RAISE empty_file.
    ENDIF.

    ASSIGN COMPONENT 'ARBGB' OF STRUCTURE ls_t100a TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_mcname.
    ENDIF.
    ASSIGN COMPONENT 'MASTERLANG' OF STRUCTURE ls_t100a TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'EN'.
    ENDIF.
    ASSIGN COMPONENT 'RESPUSER' OF STRUCTURE ls_t100a TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-uname.
    ENDIF.
    ASSIGN COMPONENT 'LASTUSER' OF STRUCTURE ls_t100a TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-uname.
    ENDIF.
    ASSIGN COMPONENT 'LDATE' OF STRUCTURE ls_t100a TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-datum.
    ENDIF.
    ASSIGN COMPONENT 'LTIME' OF STRUCTURE ls_t100a TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-uzeit.
    ENDIF.
    ASSIGN COMPONENT 'STEXT' OF STRUCTURE ls_t100a TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_mess_class_attr_csv>-stext.
    ENDIF.

    INSERT t100a FROM ls_t100a.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    ASSIGN COMPONENT 'SPRSL' OF STRUCTURE ls_t100t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'E'.
    ENDIF.
    ASSIGN COMPONENT 'ARBGB' OF STRUCTURE ls_t100t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_mcname.
    ENDIF.
    ASSIGN COMPONENT 'STEXT' OF STRUCTURE ls_t100t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_mess_class_attr_csv>-stext.
    ENDIF.

    INSERT t100t FROM ls_t100t.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    ASSIGN COMPONENT 'PGMID' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'R3TR'.
    ENDIF.
    ASSIGN COMPONENT 'OBJECT' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'MSAG'.
    ENDIF.
    ASSIGN COMPONENT 'OBJ_NAME' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_mcname.
    ENDIF.
    ASSIGN COMPONENT 'SRCSYSTEM' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-sysid.
    ENDIF.
    ASSIGN COMPONENT 'AUTHOR' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-uname.
    ENDIF.
    ASSIGN COMPONENT 'DEVCLASS' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = me->mv_package.
    ENDIF.
    ASSIGN COMPONENT 'CPROJECT' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = ' L'.
    ENDIF.
    ASSIGN COMPONENT 'MASTERLANG' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'EN'.
    ENDIF.
    ASSIGN COMPONENT 'CREATED_ON' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-datum.
    ENDIF.
    ASSIGN COMPONENT 'CHECK_DATE' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-datum.
    ENDIF.

    INSERT tadir FROM ls_tadir.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    COMMIT WORK AND WAIT.

  ENDMETHOD.

  METHOD import_mess_class_messages.

    DATA: lt_t100                    TYPE TABLE OF t100,
          lt_t100u                   TYPE TABLE OF t100u,
          lt_mess_class_messages_csv TYPE type_mess_class_messages_csv_t.

    FIELD-SYMBOLS: <lfs_t100>                    TYPE t100,
                   <lfs_t100u>                   TYPE t100u,
                   <lfs_mess_class_messages_csv> TYPE type_mess_class_messages_csv,
                   <lv_field>                    TYPE any.

    DELETE FROM t100
     WHERE arbgb = iv_mcname.

    DELETE FROM t100u
     WHERE arbgb = iv_mcname.

    CALL METHOD me->read_data_from_csv
      EXPORTING
        iv_file         = iv_file
      IMPORTING
        et_data         = lt_mess_class_messages_csv
      EXCEPTIONS
        open_file_error = 1
        empty_file      = 2.

    CASE sy-subrc.
      WHEN 1.
        RAISE open_file_error.
      WHEN 2.
        RAISE empty_file.
      WHEN OTHERS.
    ENDCASE.

    READ TABLE lt_mess_class_messages_csv ASSIGNING <lfs_mess_class_messages_csv> INDEX 1.
    IF sy-subrc IS NOT INITIAL.
      RAISE empty_file.
    ENDIF.

    LOOP AT lt_mess_class_messages_csv ASSIGNING <lfs_mess_class_messages_csv>.
      APPEND INITIAL LINE TO lt_t100 ASSIGNING <lfs_t100>.
      ASSIGN COMPONENT 'SPRSL' OF STRUCTURE <lfs_t100> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = 'E'.
      ENDIF.
      ASSIGN COMPONENT 'ARBGB' OF STRUCTURE <lfs_t100> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = iv_mcname.
      ENDIF.
      ASSIGN COMPONENT 'MSGNR' OF STRUCTURE <lfs_t100> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_mess_class_messages_csv>-msgnr.
      ENDIF.
      ASSIGN COMPONENT 'TEXT' OF STRUCTURE <lfs_t100> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_mess_class_messages_csv>-text.
      ENDIF.

      APPEND INITIAL LINE TO lt_t100u ASSIGNING <lfs_t100u>.
      ASSIGN COMPONENT 'ARBGB' OF STRUCTURE <lfs_t100u> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = iv_mcname.
      ENDIF.
      ASSIGN COMPONENT 'ARBGB' OF STRUCTURE <lfs_t100u> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = iv_mcname.
      ENDIF.
      ASSIGN COMPONENT 'MSGNR' OF STRUCTURE <lfs_t100u> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_mess_class_messages_csv>-msgnr.
      ENDIF.
      ASSIGN COMPONENT 'NAME' OF STRUCTURE <lfs_t100u> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = sy-uname.
      ENDIF.
      ASSIGN COMPONENT 'DATUM' OF STRUCTURE <lfs_t100u> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = sy-datum.
      ENDIF.
      ASSIGN COMPONENT 'SELFDEF' OF STRUCTURE <lfs_t100u> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_mess_class_messages_csv>-selfdef.
      ENDIF.
    ENDLOOP.

    INSERT t100 FROM TABLE lt_t100.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    INSERT t100u FROM TABLE lt_t100u.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    COMMIT WORK AND WAIT.

  ENDMETHOD.

  METHOD import_search_help_attributes.

    DATA: lt_search_help_attr_csv TYPE type_search_help_attr_csv_t.

    FIELD-SYMBOLS: <lfs_search_help_attr_csv> TYPE type_search_help_attr_csv,
                   <lv_field>                 TYPE any.

    DELETE FROM tadir
     WHERE pgmid EQ 'R3TR'
       AND object EQ 'SHLP'
       AND obj_name EQ iv_shlpname.

    CALL METHOD me->read_data_from_csv
      EXPORTING
        iv_file         = iv_file
      IMPORTING
        et_data         = lt_search_help_attr_csv
      EXCEPTIONS
        open_file_error = 1
        empty_file      = 2.

    CASE sy-subrc.
      WHEN 1.
        RAISE open_file_error.
      WHEN 2.
        RAISE empty_file.
      WHEN OTHERS.
    ENDCASE.

    READ TABLE lt_search_help_attr_csv ASSIGNING <lfs_search_help_attr_csv> INDEX 1.
    IF sy-subrc IS NOT INITIAL.
      RAISE empty_file.
    ENDIF.

    ASSIGN COMPONENT 'SHLPNAME' OF STRUCTURE ms_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_shlpname.
    ENDIF.

    ASSIGN COMPONENT 'DDLANGUAGE' OF STRUCTURE ms_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_search_help_attr_csv>-ddlanguage.
    ENDIF.

    ASSIGN COMPONENT 'DDTEXT' OF STRUCTURE ms_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_search_help_attr_csv>-ddtext.
    ENDIF.

    ASSIGN COMPONENT 'ISSIMPLE' OF STRUCTURE ms_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_search_help_attr_csv>-issimple.
    ENDIF.

    ASSIGN COMPONENT 'ELEMEXI' OF STRUCTURE ms_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_search_help_attr_csv>-elemexi.
    ENDIF.

    ASSIGN COMPONENT 'NOFIELDS' OF STRUCTURE ms_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_search_help_attr_csv>-nofields.
    ENDIF.

    ASSIGN COMPONENT 'ATTACHEXI' OF STRUCTURE ms_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_search_help_attr_csv>-attachexi.
    ENDIF.

    ASSIGN COMPONENT 'SELMETHOD' OF STRUCTURE ms_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_search_help_attr_csv>-selmethod.
    ENDIF.

    ASSIGN COMPONENT 'SELMTYPE' OF STRUCTURE ms_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_search_help_attr_csv>-selmtype.
    ENDIF.

    ASSIGN COMPONENT 'TEXTTAB' OF STRUCTURE ms_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_search_help_attr_csv>-texttab.
    ENDIF.

    ASSIGN COMPONENT 'SELMEXIT' OF STRUCTURE ms_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_search_help_attr_csv>-selmexit.
    ENDIF.

    ASSIGN COMPONENT 'HOTKEY' OF STRUCTURE ms_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_search_help_attr_csv>-hotkey.
    ENDIF.

    ASSIGN COMPONENT 'DIALOGTYPE' OF STRUCTURE ms_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_search_help_attr_csv>-dialogtype.
    ENDIF.

    ASSIGN COMPONENT 'AS4USER' OF STRUCTURE ms_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-uname.
    ENDIF.

    ASSIGN COMPONENT 'AS4DATE' OF STRUCTURE ms_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-datum.
    ENDIF.

    ASSIGN COMPONENT 'AS4TIME' OF STRUCTURE ms_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-uzeit.
    ENDIF.

    ASSIGN COMPONENT 'AUTOSUGGEST' OF STRUCTURE ms_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_search_help_attr_csv>-autosuggest.
    ENDIF.

    ASSIGN COMPONENT 'FUZZY_SEARCH' OF STRUCTURE ms_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_search_help_attr_csv>-fuzzy_search.
    ENDIF.

    ASSIGN COMPONENT 'FUZZY_SIMILARITY' OF STRUCTURE ms_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_search_help_attr_csv>-fuzzy_similarity.
    ENDIF.

    COMMIT WORK AND WAIT.

  ENDMETHOD.

  METHOD import_search_help_parameters.

    DATA: lt_dd32p                  TYPE TABLE OF dd32p,
          lt_search_help_params_csv TYPE type_search_help_params_csv_t.

    DATA: lv_tadir_obj_name TYPE tadir-obj_name.

    FIELD-SYMBOLS: <lfs_search_help_params_csv> TYPE type_search_help_params_csv,
                   <lv_field>                   TYPE any.

    CALL METHOD me->read_data_from_csv
      EXPORTING
        iv_file         = iv_file
      IMPORTING
        et_data         = lt_search_help_params_csv
      EXCEPTIONS
        open_file_error = 1
        empty_file      = 2.

    CASE sy-subrc.
      WHEN 1.
        RAISE open_file_error.
      WHEN 2.
        RAISE empty_file.
      WHEN OTHERS.
    ENDCASE.

    READ TABLE lt_search_help_params_csv ASSIGNING <lfs_search_help_params_csv> INDEX 1.
    IF sy-subrc IS NOT INITIAL.
      RAISE empty_file.
    ENDIF.

    LOOP AT lt_search_help_params_csv ASSIGNING <lfs_search_help_params_csv>.
      APPEND INITIAL LINE TO lt_dd32p ASSIGNING FIELD-SYMBOL(<lfs_dd32p>).

      ASSIGN COMPONENT 'SHLPNAME' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = iv_shlpname.
      ENDIF.

      ASSIGN COMPONENT 'FIELDNAME' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_search_help_params_csv>-fieldname.
      ENDIF.

      ASSIGN COMPONENT 'FLPOSITION' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_search_help_params_csv>-flposition.
      ENDIF.

      ASSIGN COMPONENT 'ROLLNAME' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_search_help_params_csv>-rollname.
      ENDIF.

      ASSIGN COMPONENT 'SHLPINPUT' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_search_help_params_csv>-shlpinput.
      ENDIF.

      ASSIGN COMPONENT 'SHLPOUTPUT' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_search_help_params_csv>-shlpoutput.
      ENDIF.

      ASSIGN COMPONENT 'SHLPSELPOS' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_search_help_params_csv>-shlpselpos.
      ENDIF.

      ASSIGN COMPONENT 'SHLPSELDIS' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_search_help_params_csv>-shlpseldis.
      ENDIF.

      ASSIGN COMPONENT 'SHLPLISPOS' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_search_help_params_csv>-shlplispos.
      ENDIF.

      ASSIGN COMPONENT 'SHLPUPPER' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_search_help_params_csv>-shlpupper.
      ENDIF.

      ASSIGN COMPONENT 'DEFAULTVAL' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_search_help_params_csv>-defaultval.
      ENDIF.

      ASSIGN COMPONENT 'DEFAULTTYP' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_search_help_params_csv>-defaulttyp.
      ENDIF.

      ASSIGN COMPONENT 'SQLTAB' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_search_help_params_csv>-sqltab.
      ENDIF.

      ASSIGN COMPONENT 'ROLLCHANGE' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_search_help_params_csv>-rollchange.
      ENDIF.

      ASSIGN COMPONENT 'INDEXNAME' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_search_help_params_csv>-indexname.
      ENDIF.

      ASSIGN COMPONENT 'DOMNAME' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_search_help_params_csv>-domname.
      ENDIF.

      ASSIGN COMPONENT 'HEADLEN' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_search_help_params_csv>-headlen.
      ENDIF.

      ASSIGN COMPONENT 'SCRLEN1' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_search_help_params_csv>-scrlen1.
      ENDIF.

      ASSIGN COMPONENT 'SCRLEN2' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_search_help_params_csv>-scrlen2.
      ENDIF.

      ASSIGN COMPONENT 'SCRLEN3' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_search_help_params_csv>-scrlen3.
      ENDIF.

      ASSIGN COMPONENT 'DATATYPE' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_search_help_params_csv>-datatype.
      ENDIF.

      ASSIGN COMPONENT 'LENG' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_search_help_params_csv>-leng.
      ENDIF.

      ASSIGN COMPONENT 'OUTPUTLEN' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_search_help_params_csv>-outputlen.
      ENDIF.

      ASSIGN COMPONENT 'DECIMALS' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_search_help_params_csv>-decimals.
      ENDIF.

      ASSIGN COMPONENT 'LOWERCASE' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_search_help_params_csv>-lowercase.
      ENDIF.

      ASSIGN COMPONENT 'SIGNFLAG' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_search_help_params_csv>-signflag.
      ENDIF.

      ASSIGN COMPONENT 'CONVEXIT' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_search_help_params_csv>-convexit.
      ENDIF.

      ASSIGN COMPONENT 'PROXYTYPE' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_search_help_params_csv>-proxytype.
      ENDIF.
    ENDLOOP.

    CALL FUNCTION 'DDIF_SHLP_PUT'
      EXPORTING
        name              = iv_shlpname
        dd30v_wa          = ms_dd30v
      TABLES
        dd32p_tab         = lt_dd32p
      EXCEPTIONS
        shlp_not_found    = 1
        name_inconsistent = 2
        shlp_inconsistent = 3
        put_failure       = 4
        put_refused       = 5
        OTHERS            = 6.

    IF sy-subrc IS NOT INITIAL.
      RAISE create_shlp_error.
    ENDIF.

    lv_tadir_obj_name = iv_shlpname.

    CALL FUNCTION 'TR_TADIR_INTERFACE'
      EXPORTING
        wi_tadir_pgmid    = 'R3TR'
        wi_tadir_object   = 'SHLP'
        wi_tadir_devclass = me->mv_package
        wi_tadir_obj_name = lv_tadir_obj_name
        wi_test_modus     = space
      EXCEPTIONS
        OTHERS            = 1.

    IF sy-subrc IS NOT INITIAL.
      RAISE create_shlp_error.
    ENDIF.

    CALL FUNCTION 'DDIF_SHLP_ACTIVATE'
      EXPORTING
        name        = iv_shlpname
      EXCEPTIONS
        not_found   = 1
        put_failure = 2
        OTHERS      = 3.

    IF sy-subrc IS NOT INITIAL.
      RAISE activate_shlp_error.
    ENDIF.

  ENDMETHOD.

  METHOD import_func_grp_attributes.

    DATA: ls_tlibg             TYPE tlibg,
          ls_tlibt             TYPE tlibt,
          ls_tadir             TYPE tadir,
          lt_func_grp_attr_csv TYPE type_func_grp_attr_csv_t.

    FIELD-SYMBOLS: <lfs_func_grp_attr_csv> TYPE type_func_grp_attr_csv,
                   <lv_field>              TYPE any.

    DELETE FROM tlibg
     WHERE area EQ iv_fungname.

    DELETE FROM tlibt
     WHERE spras EQ 'E'
       AND area EQ iv_fungname.

    DELETE FROM tadir
     WHERE pgmid EQ 'R3TR'
       AND object EQ 'FUGR'
       AND obj_name EQ iv_fungname.

    CALL METHOD me->read_data_from_csv
      EXPORTING
        iv_file         = iv_file
      IMPORTING
        et_data         = lt_func_grp_attr_csv
      EXCEPTIONS
        open_file_error = 1
        empty_file      = 2.

    CASE sy-subrc.
      WHEN 1.
        RAISE open_file_error.
      WHEN 2.
        RAISE empty_file.
      WHEN OTHERS.
    ENDCASE.

    READ TABLE lt_func_grp_attr_csv ASSIGNING <lfs_func_grp_attr_csv> INDEX 1.
    IF sy-subrc IS NOT INITIAL.
      RAISE empty_file.
    ENDIF.

    ASSIGN COMPONENT 'AREA' OF STRUCTURE ls_tlibg TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_func_grp_attr_csv>-fungname.
    ENDIF.

    INSERT tlibg FROM ls_tlibg.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    ASSIGN COMPONENT 'AREA' OF STRUCTURE ls_tlibt TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_func_grp_attr_csv>-fungname.
    ENDIF.
    ASSIGN COMPONENT 'AREAT' OF STRUCTURE ls_tlibt TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_func_grp_attr_csv>-areat.
    ENDIF.

    INSERT tlibt FROM ls_tlibt.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    ASSIGN COMPONENT 'PGMID' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'R3TR'.
    ENDIF.
    ASSIGN COMPONENT 'OBJECT' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'FUGR'.
    ENDIF.
    ASSIGN COMPONENT 'OBJ_NAME' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_fungname.
    ENDIF.
    ASSIGN COMPONENT 'SRCSYSTEM' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-sysid.
    ENDIF.
    ASSIGN COMPONENT 'AUTHOR' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-uname.
    ENDIF.
    ASSIGN COMPONENT 'DEVCLASS' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = me->mv_package.
    ENDIF.
    ASSIGN COMPONENT 'CPROJECT' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = ' L'.
    ENDIF.
    ASSIGN COMPONENT 'MASTERLANG' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'EN'.
    ENDIF.
    ASSIGN COMPONENT 'CREATED_ON' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-datum.
    ENDIF.
    ASSIGN COMPONENT 'CHECK_DATE' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-datum.
    ENDIF.

    INSERT tadir FROM ls_tadir.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

  ENDMETHOD.

  METHOD import_function_attributes.

    DATA: ls_tfdir             TYPE tfdir,
          ls_tftit             TYPE tftit,
          ls_enlfdir           TYPE enlfdir,
          lt_function_attr_csv TYPE type_function_attr_csv_t.

    FIELD-SYMBOLS: <lfs_function_attr_csv> TYPE type_function_attr_csv,
                   <lv_field>              TYPE any.

    DELETE FROM tfdir
     WHERE funcname EQ iv_funcname.

    DELETE FROM tftit
     WHERE spras EQ 'E'
       AND funcname EQ iv_funcname.

    DELETE FROM enlfdir
     WHERE funcname EQ iv_funcname.

    CALL METHOD me->read_data_from_csv
      EXPORTING
        iv_file         = iv_file
      IMPORTING
        et_data         = lt_function_attr_csv
      EXCEPTIONS
        open_file_error = 1
        empty_file      = 2.

    CASE sy-subrc.
      WHEN 1.
        RAISE open_file_error.
      WHEN 2.
        RAISE empty_file.
      WHEN OTHERS.
    ENDCASE.

    READ TABLE lt_function_attr_csv ASSIGNING <lfs_function_attr_csv> INDEX 1.
    IF sy-subrc IS NOT INITIAL.
      RAISE empty_file.
    ENDIF.

    ASSIGN COMPONENT 'FUNCNAME' OF STRUCTURE ls_tfdir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_function_attr_csv>-funcname.
    ENDIF.
    ASSIGN COMPONENT 'PNAME' OF STRUCTURE ls_tfdir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_function_attr_csv>-pname.
    ENDIF.
    ASSIGN COMPONENT 'INCLUDE' OF STRUCTURE ls_tfdir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_function_attr_csv>-include.
    ENDIF.

    INSERT tfdir FROM ls_tfdir.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    ASSIGN COMPONENT 'SPRAS' OF STRUCTURE ls_tftit TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'E'.
    ENDIF.
    ASSIGN COMPONENT 'FUNCNAME' OF STRUCTURE ls_tftit TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_funcname.
    ENDIF.
    ASSIGN COMPONENT 'STEXT' OF STRUCTURE ls_tftit TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_function_attr_csv>-stext.
    ENDIF.

    INSERT tftit FROM ls_tftit.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    ASSIGN COMPONENT 'FUNCNAME' OF STRUCTURE ls_enlfdir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_function_attr_csv>-funcname.
    ENDIF.
    ASSIGN COMPONENT 'AREA' OF STRUCTURE ls_enlfdir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_function_attr_csv>-area.
    ENDIF.
    ASSIGN COMPONENT 'ACTIVE' OF STRUCTURE ls_enlfdir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_function_attr_csv>-active.
    ENDIF.
    ASSIGN COMPONENT 'GENERATED' OF STRUCTURE ls_enlfdir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_function_attr_csv>-generated.
    ENDIF.
    ASSIGN COMPONENT 'FREEDATE' OF STRUCTURE ls_enlfdir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_function_attr_csv>-freedate.
    ENDIF.
    ASSIGN COMPONENT 'GLOBAL' OF STRUCTURE ls_enlfdir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_function_attr_csv>-global.
    ENDIF.
    ASSIGN COMPONENT 'LOC_PRIV' OF STRUCTURE ls_enlfdir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_function_attr_csv>-loc_priv.
    ENDIF.
    ASSIGN COMPONENT 'EXTEN2' OF STRUCTURE ls_enlfdir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_function_attr_csv>-exten2.
    ENDIF.
    ASSIGN COMPONENT 'EXTEN3' OF STRUCTURE ls_enlfdir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_function_attr_csv>-exten3.
    ENDIF.
    ASSIGN COMPONENT 'EXTEN4' OF STRUCTURE ls_enlfdir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_function_attr_csv>-exten4.
    ENDIF.

    INSERT enlfdir FROM ls_enlfdir.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

  ENDMETHOD.

  METHOD import_function_parameters.

    DATA: ls_fupararef           TYPE fupararef,
          lt_function_params_csv TYPE type_function_params_csv_t.

    FIELD-SYMBOLS: <lfs_function_params_csv> TYPE type_function_params_csv,
                   <lv_field>                TYPE any.

    DELETE FROM fupararef
     WHERE funcname EQ iv_funcname.

    CALL METHOD me->read_data_from_csv
      EXPORTING
        iv_file         = iv_file
      IMPORTING
        et_data         = lt_function_params_csv
      EXCEPTIONS
        open_file_error = 1
        empty_file      = 2.

    CASE sy-subrc.
      WHEN 1.
        RAISE open_file_error.
      WHEN 2.
        RAISE empty_file.
      WHEN OTHERS.
    ENDCASE.

    LOOP AT lt_function_params_csv ASSIGNING <lfs_function_params_csv>.
      ASSIGN COMPONENT 'FUNCNAME' OF STRUCTURE ls_fupararef TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_function_params_csv>-funcname.
      ENDIF.
      ASSIGN COMPONENT 'R3STATE' OF STRUCTURE ls_fupararef TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_function_params_csv>-r3state.
      ENDIF.
      ASSIGN COMPONENT 'PARAMETER' OF STRUCTURE ls_fupararef TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_function_params_csv>-parameter.
      ENDIF.
      ASSIGN COMPONENT 'PARAMTYPE' OF STRUCTURE ls_fupararef TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_function_params_csv>-paramtype.
      ENDIF.
      ASSIGN COMPONENT 'STRUCTURE' OF STRUCTURE ls_fupararef TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_function_params_csv>-structure.
      ENDIF.
      ASSIGN COMPONENT 'DEFAULTVAL' OF STRUCTURE ls_fupararef TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_function_params_csv>-defaultval.
      ENDIF.
      ASSIGN COMPONENT 'REFERENCE' OF STRUCTURE ls_fupararef TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_function_params_csv>-reference.
      ENDIF.
      ASSIGN COMPONENT 'PPOSITION' OF STRUCTURE ls_fupararef TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_function_params_csv>-pposition.
      ENDIF.
      ASSIGN COMPONENT 'OPTIONAL' OF STRUCTURE ls_fupararef TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_function_params_csv>-optional.
      ENDIF.
      ASSIGN COMPONENT 'TYPE' OF STRUCTURE ls_fupararef TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_function_params_csv>-type.
      ENDIF.
      ASSIGN COMPONENT 'CLASS' OF STRUCTURE ls_fupararef TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_function_params_csv>-class.
      ENDIF.
      ASSIGN COMPONENT 'REF_CLASS ' OF STRUCTURE ls_fupararef TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lv_field> = <lfs_function_params_csv>-ref_class .
      ENDIF.

      INSERT fupararef FROM ls_fupararef.
      IF sy-subrc IS NOT INITIAL.
        RAISE insert_record_error.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.

  METHOD import_program_attributes.

    DATA: ls_trdirt           TYPE trdirt,
          ls_tadir            TYPE tadir,
          lt_source_code      TYPE TABLE OF string,
          lt_program_attr_csv TYPE type_program_attr_csv_t.

    FIELD-SYMBOLS: <lfs_source_code>      TYPE string,
                   <lfs_program_attr_csv> TYPE type_program_attr_csv,
                   <lv_field>             TYPE any.

    DELETE FROM trdirt
     WHERE name = iv_progname.

    DELETE FROM tadir
     WHERE pgmid EQ 'R3TR'
       AND object EQ 'PROG'
       AND obj_name EQ iv_progname.

    CALL METHOD me->read_data_from_csv
      EXPORTING
        iv_file         = iv_file
      IMPORTING
        et_data         = lt_program_attr_csv
      EXCEPTIONS
        open_file_error = 1
        empty_file      = 2.

    CASE sy-subrc.
      WHEN 1.
        RAISE open_file_error.
      WHEN 2.
        RAISE empty_file.
      WHEN OTHERS.
    ENDCASE.

    READ TABLE lt_program_attr_csv ASSIGNING <lfs_program_attr_csv> INDEX 1.
    IF sy-subrc IS NOT INITIAL.
      RAISE empty_file.
    ENDIF.

    IF <lfs_program_attr_csv>-subc EQ '1'.
      APPEND INITIAL LINE TO lt_source_code ASSIGNING <lfs_source_code>.
      CONCATENATE 'REPORT' iv_progname '.' INTO <lfs_source_code> SEPARATED BY space.
    ENDIF.

    INSERT REPORT iv_progname FROM lt_source_code
                      PROGRAM TYPE <lfs_program_attr_csv>-subc
            FIXED-POINT ARITHMETIC 'X'
                           VERSION 'X'.
    IF sy-subrc IS NOT INITIAL.
      RAISE create_program_error.
    ENDIF.

    ASSIGN COMPONENT 'NAME' OF STRUCTURE ls_trdirt TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_progname.
    ENDIF.
    ASSIGN COMPONENT 'SPRSL' OF STRUCTURE ls_trdirt TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'E'.
    ENDIF.
    ASSIGN COMPONENT 'TEXT' OF STRUCTURE ls_trdirt TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_program_attr_csv>-text.
    ENDIF.

    INSERT trdirt FROM ls_trdirt.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    ASSIGN COMPONENT 'PGMID' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'R3TR'.
    ENDIF.
    ASSIGN COMPONENT 'OBJECT' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'PROG'.
    ENDIF.
    ASSIGN COMPONENT 'OBJ_NAME' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_progname.
    ENDIF.
    ASSIGN COMPONENT 'SRCSYSTEM' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-sysid.
    ENDIF.
    ASSIGN COMPONENT 'AUTHOR' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-uname.
    ENDIF.
    ASSIGN COMPONENT 'DEVCLASS' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = me->mv_package.
    ENDIF.
    ASSIGN COMPONENT 'CPROJECT' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = ' L'.
    ENDIF.
    ASSIGN COMPONENT 'MASTERLANG' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'EN'.
    ENDIF.
    ASSIGN COMPONENT 'CREATED_ON' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-datum.
    ENDIF.
    ASSIGN COMPONENT 'CHECK_DATE' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-datum.
    ENDIF.

    INSERT tadir FROM ls_tadir.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    COMMIT WORK AND WAIT.

  ENDMETHOD.

  METHOD import_program_source_code.

    DATA: lt_source_code             TYPE TABLE OF string,
          lt_program_source_code_csv TYPE type_program_source_code_csv_t.

    FIELD-SYMBOLS: <lfs_source_code>             TYPE string,
                   <lfs_program_source_code_csv> TYPE type_program_source_code_csv.

    CALL METHOD me->read_data_from_csv
      EXPORTING
        iv_file         = iv_file
      IMPORTING
        et_data         = lt_program_source_code_csv
      EXCEPTIONS
        open_file_error = 1
        empty_file      = 2.

    CASE sy-subrc.
      WHEN 1.
        RAISE open_file_error.
      WHEN 2.
        RAISE empty_file.
      WHEN OTHERS.
    ENDCASE.

    READ TABLE lt_program_source_code_csv ASSIGNING <lfs_program_source_code_csv> INDEX 1.
    IF sy-subrc IS NOT INITIAL.
      RAISE empty_file.
    ENDIF.

    LOOP AT lt_program_source_code_csv ASSIGNING <lfs_program_source_code_csv>.
      APPEND INITIAL LINE TO lt_source_code ASSIGNING <lfs_source_code>.
      <lfs_source_code> = <lfs_program_source_code_csv>-line.
    ENDLOOP.

    INSERT REPORT iv_progname FROM lt_source_code.

    IF sy-subrc IS NOT INITIAL.
      RAISE create_program_error.
    ENDIF.

  ENDMETHOD.

  METHOD import_transaction_attributes.

    DATA: ls_tstc                 TYPE tstc,
          ls_tstct                TYPE tstct,
          ls_tadir                TYPE tadir,
          lt_transaction_attr_csv TYPE type_transaction_attr_csv_t.

    FIELD-SYMBOLS: <lfs_transaction_attr_csv> TYPE type_transaction_attr_csv,
                   <lv_field>                 TYPE any.

    DELETE FROM tstc
     WHERE tcode = iv_tcode.

    DELETE FROM tstct
     WHERE tcode = iv_tcode.

    DELETE FROM tadir
     WHERE pgmid EQ 'R3TR'
       AND object EQ 'TRAN'
       AND obj_name EQ iv_tcode.

    CALL METHOD me->read_data_from_csv
      EXPORTING
        iv_file         = iv_file
      IMPORTING
        et_data         = lt_transaction_attr_csv
      EXCEPTIONS
        open_file_error = 1
        empty_file      = 2.

    CASE sy-subrc.
      WHEN 1.
        RAISE open_file_error.
      WHEN 2.
        RAISE empty_file.
      WHEN OTHERS.
    ENDCASE.

    READ TABLE lt_transaction_attr_csv ASSIGNING <lfs_transaction_attr_csv> INDEX 1.
    IF sy-subrc IS NOT INITIAL.
      RAISE empty_file.
    ENDIF.

    ASSIGN COMPONENT 'TCODE' OF STRUCTURE ls_tstc TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_tcode.
    ENDIF.
    ASSIGN COMPONENT 'PGMNA' OF STRUCTURE ls_tstc TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_transaction_attr_csv>-pgmna.
    ENDIF.
    ASSIGN COMPONENT 'DYPNO' OF STRUCTURE ls_tstc TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_transaction_attr_csv>-dypno.
    ENDIF.
    ASSIGN COMPONENT 'MENUE' OF STRUCTURE ls_tstc TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_transaction_attr_csv>-menue.
    ENDIF.
    ASSIGN COMPONENT 'CINFO' OF STRUCTURE ls_tstc TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_transaction_attr_csv>-cinfo.
    ENDIF.
    ASSIGN COMPONENT 'ARBGB' OF STRUCTURE ls_tstc TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_transaction_attr_csv>-arbgb.
    ENDIF.

    INSERT tstc FROM ls_tstc.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    ASSIGN COMPONENT 'SPRSL' OF STRUCTURE ls_tstct TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'E'.
    ENDIF.
    ASSIGN COMPONENT 'TCODE' OF STRUCTURE ls_tstct TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_tcode.
    ENDIF.
    ASSIGN COMPONENT 'TTEXT' OF STRUCTURE ls_tstct TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = <lfs_transaction_attr_csv>-ttext.
    ENDIF.

    INSERT tstct FROM ls_tstct.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

    ASSIGN COMPONENT 'PGMID' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'R3TR'.
    ENDIF.
    ASSIGN COMPONENT 'OBJECT' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'TRAN'.
    ENDIF.
    ASSIGN COMPONENT 'OBJ_NAME' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = iv_tcode.
    ENDIF.
    ASSIGN COMPONENT 'SRCSYSTEM' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-sysid.
    ENDIF.
    ASSIGN COMPONENT 'AUTHOR' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-uname.
    ENDIF.
    ASSIGN COMPONENT 'DEVCLASS' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = me->mv_package.
    ENDIF.
    ASSIGN COMPONENT 'CPROJECT' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = ' L'.
    ENDIF.
    ASSIGN COMPONENT 'MASTERLANG' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = 'EN'.
    ENDIF.
    ASSIGN COMPONENT 'CREATED_ON' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-datum.
    ENDIF.
    ASSIGN COMPONENT 'CHECK_DATE' OF STRUCTURE ls_tadir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lv_field> = sy-datum.
    ENDIF.

    INSERT tadir FROM ls_tadir.
    IF sy-subrc IS NOT INITIAL.
      RAISE insert_record_error.
    ENDIF.

  ENDMETHOD.

  METHOD read_data_from_csv.

    DATA: lo_converter TYPE REF TO cl_rsda_csv_converter,
          lt_string    TYPE string_table.

    FIELD-SYMBOLS: <lfs_string> TYPE string,
                   <lfs_data>   TYPE any.

    CLEAR et_data[].

    CALL FUNCTION 'GUI_UPLOAD'
      EXPORTING
        filename                = iv_file
        codepage                = '4110'
      TABLES
        data_tab                = lt_string
      EXCEPTIONS
        file_open_error         = 1
        file_read_error         = 2
        no_batch                = 3
        gui_refuse_filetransfer = 4
        invalid_type            = 5
        no_authority            = 6
        unknown_error           = 7
        bad_data_format         = 8
        header_not_allowed      = 9
        separator_not_allowed   = 10
        header_too_long         = 11
        unknown_dp_error        = 12
        access_denied           = 13
        dp_out_of_memory        = 14
        disk_full               = 15
        dp_timeout              = 16
        OTHERS                  = 17.

    IF sy-subrc IS NOT INITIAL.
      RAISE open_file_error.
    ENDIF.

    CALL METHOD cl_rsda_csv_converter=>create
      EXPORTING
        i_separator = ';'
      RECEIVING
        r_r_conv    = lo_converter.

    LOOP AT lt_string ASSIGNING <lfs_string>.
      APPEND INITIAL LINE TO et_data ASSIGNING <lfs_data>.

      CALL METHOD lo_converter->csv_to_structure
        EXPORTING
          i_data   = <lfs_string>
        IMPORTING
          e_s_data = <lfs_data>.
    ENDLOOP.

    IF et_data[] IS INITIAL.
      RAISE empty_file.
    ENDIF.

  ENDMETHOD.

ENDCLASS.

CLASS cl_export DEFINITION.

  PUBLIC SECTION.
    METHODS: export_selected IMPORTING iv_proj   TYPE char30
                                       iv_dir    TYPE string
                                       iv_p_doma TYPE char1
                                       iv_p_dtel TYPE char1
                                       iv_p_stru TYPE char1
                                       iv_p_tabt TYPE char1
                                       iv_p_tabl TYPE char1
                                       iv_p_mess TYPE char1
                                       iv_p_shlp TYPE char1
                                       iv_p_fung TYPE char1
                                       iv_p_func TYPE char1
                                       iv_p_prog TYPE char1
                                       iv_p_tran TYPE char1.
  PRIVATE SECTION.
    METHODS:
      export_domain_attributes IMPORTING  iv_domname TYPE domname
                                          iv_file    TYPE string
                               EXCEPTIONS no_domain_found create_file_error,
      export_data_element_attributes IMPORTING  iv_rollname TYPE rollname
                                                iv_file     TYPE string
                                     EXCEPTIONS no_data_element_found create_file_error,
      export_structure_attributes IMPORTING  iv_tabname TYPE tabname
                                             iv_file    TYPE string
                                  EXCEPTIONS no_structure_found create_file_error,
      export_structure_fields IMPORTING  iv_tabname TYPE tabname
                                         iv_file    TYPE string
                              EXCEPTIONS no_structure_found create_file_error,
      export_table_type_attributes IMPORTING  iv_typename TYPE ttypename
                                              iv_file     TYPE string
                                   EXCEPTIONS no_table_type_found create_file_error,
      export_transp_table_attributes IMPORTING  iv_tabname TYPE tabname
                                                iv_file    TYPE string
                                     EXCEPTIONS no_transp_table_found create_file_error,
      export_transp_table_fields IMPORTING  iv_tabname TYPE tabname
                                            iv_file    TYPE string
                                 EXCEPTIONS no_transp_table_found create_file_error,
      export_transp_table_data IMPORTING  iv_tabname TYPE tabname
                                          iv_file    TYPE string
                               EXCEPTIONS no_transp_table_found create_file_error,
      export_mess_class_attributes IMPORTING  iv_mcname TYPE arbgb
                                              iv_file   TYPE string
                                   EXCEPTIONS no_mess_class_found create_file_error,
      export_mess_class_messages IMPORTING  iv_mcname TYPE arbgb
                                            iv_file   TYPE string
                                 EXCEPTIONS no_messages_found create_file_error,

      export_search_help_attributes IMPORTING  iv_shlpname TYPE shlpname
                                               iv_file     TYPE string
                                    EXCEPTIONS no_search_help_found create_file_error,
      export_search_help_parameters IMPORTING  iv_shlpname TYPE shlpname
                                               iv_file     TYPE string
                                    EXCEPTIONS no_search_help_found create_file_error,

      export_func_grp_attributes IMPORTING  iv_fungname TYPE rs38l_area
                                            iv_file     TYPE string
                                 EXCEPTIONS no_function_group_found create_file_error,
      export_function_attributes IMPORTING  iv_funcname TYPE rs38l_fnam
                                            iv_file     TYPE string
                                 EXCEPTIONS no_function_found create_file_error,
      export_function_parameters IMPORTING  iv_funcname TYPE rs38l_fnam
                                            iv_file     TYPE string
                                 EXCEPTIONS no_function_found create_file_error,
      export_program_attributes IMPORTING  iv_progname TYPE progname
                                           iv_file     TYPE string
                                EXCEPTIONS no_program_found create_file_error,
      export_program_source_code IMPORTING  iv_progname TYPE progname
                                            iv_file     TYPE string
                                 EXCEPTIONS no_program_found create_file_error,
      export_transaction_attributes IMPORTING  iv_tcode TYPE tcode
                                               iv_file  TYPE string
                                    EXCEPTIONS no_transaction_found create_file_error,
      write_data_to_csv IMPORTING  iv_file TYPE string
                                   it_data TYPE table
                        EXCEPTIONS create_file_error.

ENDCLASS.

CLASS cl_export IMPLEMENTATION.

  METHOD export_selected.

    TYPES: BEGIN OF type_export,
             project     TYPE char30,
             line        TYPE int4,
             object_type TYPE char30,
             object_name TYPE char40,
           END OF type_export.

    DATA: lt_export          TYPE TABLE OF type_export,
          lt_index_csv       TYPE type_index_csv_t,
          lv_where_clause    TYPE char50,
          lv_name_lower_case TYPE string,
          lv_file            TYPE string,
          lv_mcname          TYPE arbgb,
          lv_shlpname        TYPE shlpname,
          lv_fungname        TYPE rs38l_area,
          lv_funcname        TYPE rs38l_fnam,
          lv_progname        TYPE progname,
          lv_tcode           TYPE tcode.

    FIELD-SYMBOLS: <lfs_index_csv> TYPE type_index_csv,
                   <lfs_export>    TYPE type_export.

    CONCATENATE 'PROJECT EQ ''' iv_proj '''' INTO lv_where_clause.

    SELECT *
      FROM (gc_export_table_name)
      INTO CORRESPONDING FIELDS OF TABLE lt_export
     WHERE (lv_where_clause).
*     ORDER BY ('LINE').

    LOOP AT lt_export ASSIGNING <lfs_export>.
      CASE <lfs_export>-object_type.
        WHEN gc_object_type_domain.
          APPEND INITIAL LINE TO lt_index_csv ASSIGNING <lfs_index_csv>.
          <lfs_index_csv>-object_type = <lfs_export>-object_type.
          <lfs_index_csv>-object_name = <lfs_export>-object_name.
          <lfs_index_csv>-content_type = gc_content_type_attributes.
          lv_name_lower_case = <lfs_export>-object_name.
          TRANSLATE lv_name_lower_case TO LOWER CASE.
          CONCATENATE 'domain\' lv_name_lower_case '_attributes.csv' INTO <lfs_index_csv>-file.

        WHEN gc_object_type_data_element.
          APPEND INITIAL LINE TO lt_index_csv ASSIGNING <lfs_index_csv>.
          <lfs_index_csv>-object_type = <lfs_export>-object_type.
          <lfs_index_csv>-object_name = <lfs_export>-object_name.
          <lfs_index_csv>-content_type = gc_content_type_attributes.
          lv_name_lower_case = <lfs_export>-object_name.
          TRANSLATE lv_name_lower_case TO LOWER CASE.
          CONCATENATE 'data element\' lv_name_lower_case '_attributes.csv' INTO <lfs_index_csv>-file.

        WHEN gc_object_type_structure.
          APPEND INITIAL LINE TO lt_index_csv ASSIGNING <lfs_index_csv>.
          <lfs_index_csv>-object_type = <lfs_export>-object_type.
          <lfs_index_csv>-object_name = <lfs_export>-object_name.
          <lfs_index_csv>-content_type = gc_content_type_attributes.
          lv_name_lower_case = <lfs_export>-object_name.
          TRANSLATE lv_name_lower_case TO LOWER CASE.
          CONCATENATE 'structure\' lv_name_lower_case '_attributes.csv' INTO <lfs_index_csv>-file.

          APPEND INITIAL LINE TO lt_index_csv ASSIGNING <lfs_index_csv>.
          <lfs_index_csv>-object_type = <lfs_export>-object_type.
          <lfs_index_csv>-object_name = <lfs_export>-object_name.
          <lfs_index_csv>-content_type = gc_content_type_fields.
          lv_name_lower_case = <lfs_export>-object_name.
          TRANSLATE lv_name_lower_case TO LOWER CASE.
          CONCATENATE 'structure\' lv_name_lower_case '_fields.csv' INTO <lfs_index_csv>-file.

        WHEN gc_object_type_table_type.
          APPEND INITIAL LINE TO lt_index_csv ASSIGNING <lfs_index_csv>.
          <lfs_index_csv>-object_type = <lfs_export>-object_type.
          <lfs_index_csv>-object_name = <lfs_export>-object_name.
          <lfs_index_csv>-content_type = gc_content_type_attributes.
          lv_name_lower_case = <lfs_export>-object_name.
          TRANSLATE lv_name_lower_case TO LOWER CASE.
          CONCATENATE 'table type\' lv_name_lower_case '_attributes.csv' INTO <lfs_index_csv>-file.

        WHEN gc_object_type_transp_table.
          APPEND INITIAL LINE TO lt_index_csv ASSIGNING <lfs_index_csv>.
          <lfs_index_csv>-object_type = <lfs_export>-object_type.
          <lfs_index_csv>-object_name = <lfs_export>-object_name.
          <lfs_index_csv>-content_type = gc_content_type_attributes.
          lv_name_lower_case = <lfs_export>-object_name.
          TRANSLATE lv_name_lower_case TO LOWER CASE.
          CONCATENATE 'transparent table\' lv_name_lower_case '_attributes.csv' INTO <lfs_index_csv>-file.

          APPEND INITIAL LINE TO lt_index_csv ASSIGNING <lfs_index_csv>.
          <lfs_index_csv>-object_type = <lfs_export>-object_type.
          <lfs_index_csv>-object_name = <lfs_export>-object_name.
          <lfs_index_csv>-content_type = gc_content_type_fields.
          lv_name_lower_case = <lfs_export>-object_name.
          TRANSLATE lv_name_lower_case TO LOWER CASE.
          CONCATENATE 'transparent table\' lv_name_lower_case '_fields.csv' INTO <lfs_index_csv>-file.

          APPEND INITIAL LINE TO lt_index_csv ASSIGNING <lfs_index_csv>.
          <lfs_index_csv>-object_type = <lfs_export>-object_type.
          <lfs_index_csv>-object_name = <lfs_export>-object_name.
          <lfs_index_csv>-content_type = gc_content_type_table_data.
          lv_name_lower_case = <lfs_export>-object_name.
          TRANSLATE lv_name_lower_case TO LOWER CASE.
          CONCATENATE 'transparent table\' lv_name_lower_case '_table_data.csv' INTO <lfs_index_csv>-file.

        WHEN gc_object_type_mess_class.
          APPEND INITIAL LINE TO lt_index_csv ASSIGNING <lfs_index_csv>.
          <lfs_index_csv>-object_type = <lfs_export>-object_type.
          <lfs_index_csv>-object_name = <lfs_export>-object_name.
          <lfs_index_csv>-content_type = gc_content_type_attributes.
          lv_name_lower_case = <lfs_export>-object_name.
          TRANSLATE lv_name_lower_case TO LOWER CASE.
          CONCATENATE 'message class\' lv_name_lower_case '_attributes.csv' INTO <lfs_index_csv>-file.

          APPEND INITIAL LINE TO lt_index_csv ASSIGNING <lfs_index_csv>.
          <lfs_index_csv>-object_type = <lfs_export>-object_type.
          <lfs_index_csv>-object_name = <lfs_export>-object_name.
          <lfs_index_csv>-content_type = gc_content_type_messages.
          lv_name_lower_case = <lfs_export>-object_name.
          TRANSLATE lv_name_lower_case TO LOWER CASE.
          CONCATENATE 'message class\' lv_name_lower_case '_messages.csv' INTO <lfs_index_csv>-file.

        WHEN gc_object_type_search_help.
          APPEND INITIAL LINE TO lt_index_csv ASSIGNING <lfs_index_csv>.
          <lfs_index_csv>-object_type = <lfs_export>-object_type.
          <lfs_index_csv>-object_name = <lfs_export>-object_name.
          <lfs_index_csv>-content_type = gc_content_type_attributes.
          lv_name_lower_case = <lfs_export>-object_name.
          TRANSLATE lv_name_lower_case TO LOWER CASE.
          CONCATENATE 'search help\' lv_name_lower_case '_attributes.csv' INTO <lfs_index_csv>-file.

          APPEND INITIAL LINE TO lt_index_csv ASSIGNING <lfs_index_csv>.
          <lfs_index_csv>-object_type = <lfs_export>-object_type.
          <lfs_index_csv>-object_name = <lfs_export>-object_name.
          <lfs_index_csv>-content_type = gc_content_type_parameters.
          lv_name_lower_case = <lfs_export>-object_name.
          TRANSLATE lv_name_lower_case TO LOWER CASE.
          CONCATENATE 'search help\' lv_name_lower_case '_parameters.csv' INTO <lfs_index_csv>-file.

        WHEN gc_object_type_function_group.
          APPEND INITIAL LINE TO lt_index_csv ASSIGNING <lfs_index_csv>.
          <lfs_index_csv>-object_type = <lfs_export>-object_type.
          <lfs_index_csv>-object_name = <lfs_export>-object_name.
          <lfs_index_csv>-content_type = gc_content_type_attributes.
          lv_name_lower_case = <lfs_export>-object_name.
          TRANSLATE lv_name_lower_case TO LOWER CASE.
          CONCATENATE 'function_group\' lv_name_lower_case '_attributes.csv' INTO <lfs_index_csv>-file.

        WHEN gc_object_type_function.
          APPEND INITIAL LINE TO lt_index_csv ASSIGNING <lfs_index_csv>.
          <lfs_index_csv>-object_type = <lfs_export>-object_type.
          <lfs_index_csv>-object_name = <lfs_export>-object_name.
          <lfs_index_csv>-content_type = gc_content_type_attributes.
          lv_name_lower_case = <lfs_export>-object_name.
          TRANSLATE lv_name_lower_case TO LOWER CASE.
          CONCATENATE 'function\' lv_name_lower_case '_attributes.csv' INTO <lfs_index_csv>-file.

          APPEND INITIAL LINE TO lt_index_csv ASSIGNING <lfs_index_csv>.
          <lfs_index_csv>-object_type = <lfs_export>-object_type.
          <lfs_index_csv>-object_name = <lfs_export>-object_name.
          <lfs_index_csv>-content_type = gc_content_type_parameters.
          lv_name_lower_case = <lfs_export>-object_name.
          TRANSLATE lv_name_lower_case TO LOWER CASE.
          CONCATENATE 'function\' lv_name_lower_case '_parameters.csv' INTO <lfs_index_csv>-file.

        WHEN gc_object_type_program.
          APPEND INITIAL LINE TO lt_index_csv ASSIGNING <lfs_index_csv>.
          <lfs_index_csv>-object_type = <lfs_export>-object_type.
          <lfs_index_csv>-object_name = <lfs_export>-object_name.
          <lfs_index_csv>-content_type = gc_content_type_attributes.
          lv_name_lower_case = <lfs_export>-object_name.
          TRANSLATE lv_name_lower_case TO LOWER CASE.
          CONCATENATE 'program\' lv_name_lower_case '_attributes.csv' INTO <lfs_index_csv>-file.

          APPEND INITIAL LINE TO lt_index_csv ASSIGNING <lfs_index_csv>.
          <lfs_index_csv>-object_type = <lfs_export>-object_type.
          <lfs_index_csv>-object_name = <lfs_export>-object_name.
          <lfs_index_csv>-content_type = gc_content_type_source_code.
          lv_name_lower_case = <lfs_export>-object_name.
          TRANSLATE lv_name_lower_case TO LOWER CASE.
          CONCATENATE 'program\' lv_name_lower_case '_source_code.csv' INTO <lfs_index_csv>-file.

        WHEN gc_object_type_transaction.
          APPEND INITIAL LINE TO lt_index_csv ASSIGNING <lfs_index_csv>.
          <lfs_index_csv>-object_type = <lfs_export>-object_type.
          <lfs_index_csv>-object_name = <lfs_export>-object_name.
          <lfs_index_csv>-content_type = gc_content_type_attributes.
          lv_name_lower_case = <lfs_export>-object_name.
          TRANSLATE lv_name_lower_case TO LOWER CASE.
          CONCATENATE 'transaction\' lv_name_lower_case '_attributes.csv' INTO <lfs_index_csv>-file.
      ENDCASE.
    ENDLOOP.

    IF iv_p_doma EQ gc_abap_on.
      LOOP AT lt_index_csv ASSIGNING <lfs_index_csv>
        WHERE object_type EQ gc_object_type_domain.
        CONCATENATE iv_dir '\' <lfs_index_csv>-file INTO lv_file.
        CASE <lfs_index_csv>-content_type.
          WHEN gc_content_type_attributes.
            CALL METHOD me->export_domain_attributes
              EXPORTING
                iv_domname        = <lfs_index_csv>-object_name
                iv_file           = lv_file
              EXCEPTIONS
                no_domain_found   = 1
                create_file_error = 2.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Domain not found or not active' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Cannot create file' TYPE 'S'.
                RETURN.
            ENDCASE.
        ENDCASE.
      ENDLOOP.
    ENDIF.

    IF iv_p_dtel EQ gc_abap_on.
      LOOP AT lt_index_csv ASSIGNING <lfs_index_csv>
        WHERE object_type EQ gc_object_type_data_element.
        CONCATENATE iv_dir '\' <lfs_index_csv>-file INTO lv_file.
        CASE <lfs_index_csv>-content_type.
          WHEN gc_content_type_attributes.
            CALL METHOD me->export_data_element_attributes
              EXPORTING
                iv_rollname           = <lfs_index_csv>-object_name
                iv_file               = lv_file
              EXCEPTIONS
                no_data_element_found = 1
                create_file_error     = 2.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Data element not found or not active' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Cannot create file' TYPE 'S'.
                RETURN.
            ENDCASE.
        ENDCASE.
      ENDLOOP.
    ENDIF.

    IF iv_p_stru EQ gc_abap_on.
      LOOP AT lt_index_csv ASSIGNING <lfs_index_csv>
        WHERE object_type EQ gc_object_type_structure.
        CONCATENATE iv_dir '\' <lfs_index_csv>-file INTO lv_file.
        CASE <lfs_index_csv>-content_type.
          WHEN gc_content_type_attributes.
            CALL METHOD me->export_structure_attributes
              EXPORTING
                iv_tabname         = <lfs_index_csv>-object_name
                iv_file            = lv_file
              EXCEPTIONS
                no_structure_found = 1
                create_file_error  = 2.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Structure not found or not active' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Cannot create file' TYPE 'S'.
                RETURN.
            ENDCASE.
          WHEN gc_content_type_fields.
            CALL METHOD me->export_structure_fields
              EXPORTING
                iv_tabname         = <lfs_index_csv>-object_name
                iv_file            = lv_file
              EXCEPTIONS
                no_structure_found = 1
                create_file_error  = 2.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Structure not found or not active' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Cannot create file' TYPE 'S'.
                RETURN.
            ENDCASE.
        ENDCASE.
      ENDLOOP.
    ENDIF.

    IF iv_p_tabt EQ gc_abap_on.
      LOOP AT lt_index_csv ASSIGNING <lfs_index_csv>
        WHERE object_type EQ gc_object_type_table_type.
        CONCATENATE iv_dir '\' <lfs_index_csv>-file INTO lv_file.
        CASE <lfs_index_csv>-content_type.
          WHEN gc_content_type_attributes.
            CALL METHOD me->export_table_type_attributes
              EXPORTING
                iv_typename         = <lfs_index_csv>-object_name
                iv_file             = lv_file
              EXCEPTIONS
                no_table_type_found = 1
                create_file_error   = 2.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Table type not found or not active' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Cannot create file' TYPE 'S'.
                RETURN.
            ENDCASE.
        ENDCASE.
      ENDLOOP.
    ENDIF.

    IF iv_p_tabl EQ gc_abap_on.
      LOOP AT lt_index_csv ASSIGNING <lfs_index_csv>
        WHERE object_type EQ gc_object_type_transp_table.
        CONCATENATE iv_dir '\' <lfs_index_csv>-file INTO lv_file.
        CASE <lfs_index_csv>-content_type.
          WHEN gc_content_type_attributes.
            CALL METHOD me->export_transp_table_attributes
              EXPORTING
                iv_tabname            = <lfs_index_csv>-object_name
                iv_file               = lv_file
              EXCEPTIONS
                no_transp_table_found = 1
                create_file_error     = 2.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Transparent table not found or not active' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Cannot create file' TYPE 'S'.
                RETURN.
            ENDCASE.
          WHEN gc_content_type_fields.
            CALL METHOD me->export_transp_table_fields
              EXPORTING
                iv_tabname            = <lfs_index_csv>-object_name
                iv_file               = lv_file
              EXCEPTIONS
                no_transp_table_found = 1
                create_file_error     = 2.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Transparent table not found or not active' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Cannot create file' TYPE 'S'.
                RETURN.
            ENDCASE.
          WHEN gc_content_type_table_data.
            CALL METHOD me->export_transp_table_data
              EXPORTING
                iv_tabname            = <lfs_index_csv>-object_name
                iv_file               = lv_file
              EXCEPTIONS
                no_transp_table_found = 1
                create_file_error     = 2.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Transparent table not found or not active' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Cannot create file' TYPE 'S'.
                RETURN.
            ENDCASE.
        ENDCASE.
      ENDLOOP.
    ENDIF.

    IF iv_p_mess EQ gc_abap_on.
      LOOP AT lt_index_csv ASSIGNING <lfs_index_csv>
        WHERE object_type EQ gc_object_type_mess_class.
        CONCATENATE iv_dir '\' <lfs_index_csv>-file INTO lv_file.
        CASE <lfs_index_csv>-content_type.
          WHEN gc_content_type_attributes.
            lv_mcname = <lfs_index_csv>-object_name.
            CALL METHOD me->export_mess_class_attributes
              EXPORTING
                iv_mcname           = lv_mcname
                iv_file             = lv_file
              EXCEPTIONS
                no_mess_class_found = 1
                create_file_error   = 2.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Message class not found or not active' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Cannot create file' TYPE 'S'.
                RETURN.
            ENDCASE.
          WHEN gc_content_type_messages.
            lv_mcname = <lfs_index_csv>-object_name.
            CALL METHOD me->export_mess_class_messages
              EXPORTING
                iv_mcname         = lv_mcname
                iv_file           = lv_file
              EXCEPTIONS
                no_messages_found = 1
                create_file_error = 2.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Message class not found or not active' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Cannot create file' TYPE 'S'.
                RETURN.
            ENDCASE.
        ENDCASE.
      ENDLOOP.
    ENDIF.
***
    IF iv_p_shlp EQ gc_abap_on.
      LOOP AT lt_index_csv ASSIGNING <lfs_index_csv>
        WHERE object_type EQ gc_object_type_search_help.
        CONCATENATE iv_dir '\' <lfs_index_csv>-file INTO lv_file.
        CASE <lfs_index_csv>-content_type.
          WHEN gc_content_type_attributes.
            lv_shlpname = <lfs_index_csv>-object_name.
            CALL METHOD me->export_search_help_attributes
              EXPORTING
                iv_shlpname          = lv_shlpname
                iv_file              = lv_file
              EXCEPTIONS
                no_search_help_found = 1
                create_file_error    = 2.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Search help not found or not active' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Cannot create file' TYPE 'S'.
                RETURN.
            ENDCASE.
          WHEN gc_content_type_parameters.
            lv_shlpname = <lfs_index_csv>-object_name.
            CALL METHOD me->export_search_help_parameters
              EXPORTING
                iv_shlpname          = lv_shlpname
                iv_file              = lv_file
              EXCEPTIONS
                no_search_help_found = 1
                create_file_error    = 2.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Search help not found or not active' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Cannot create file' TYPE 'S'.
                RETURN.
            ENDCASE.
        ENDCASE.
      ENDLOOP.
    ENDIF.
***
    IF iv_p_fung EQ gc_abap_on.
      LOOP AT lt_index_csv ASSIGNING <lfs_index_csv>
        WHERE object_type EQ gc_object_type_function_group.
        CONCATENATE iv_dir '\' <lfs_index_csv>-file INTO lv_file.
        CASE <lfs_index_csv>-content_type.
          WHEN gc_content_type_attributes.
            lv_fungname = <lfs_index_csv>-object_name.
            CALL METHOD me->export_func_grp_attributes
              EXPORTING
                iv_fungname             = lv_fungname
                iv_file                 = lv_file
              EXCEPTIONS
                no_function_group_found = 1
                create_file_error       = 2.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Function group not found or not active' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Cannot create file' TYPE 'S'.
                RETURN.
            ENDCASE.
        ENDCASE.
      ENDLOOP.
    ENDIF.

    IF iv_p_func EQ gc_abap_on.
      LOOP AT lt_index_csv ASSIGNING <lfs_index_csv>
        WHERE object_type EQ gc_object_type_function.
        CONCATENATE iv_dir '\' <lfs_index_csv>-file INTO lv_file.
        CASE <lfs_index_csv>-content_type.
          WHEN gc_content_type_attributes.
            lv_funcname = <lfs_index_csv>-object_name.
            CALL METHOD me->export_function_attributes
              EXPORTING
                iv_funcname       = lv_funcname
                iv_file           = lv_file
              EXCEPTIONS
                no_function_found = 1
                create_file_error = 2.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Function not found or not active' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Cannot create file' TYPE 'S'.
                RETURN.
            ENDCASE.

          WHEN gc_content_type_parameters.
            lv_funcname = <lfs_index_csv>-object_name.
            CALL METHOD me->export_function_parameters
              EXPORTING
                iv_funcname       = lv_funcname
                iv_file           = lv_file
              EXCEPTIONS
                no_function_found = 1
                create_file_error = 2.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Function not found or not active' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Cannot create file' TYPE 'S'.
                RETURN.
            ENDCASE.
        ENDCASE.
      ENDLOOP.
    ENDIF.

    IF iv_p_prog EQ gc_abap_on.
      LOOP AT lt_index_csv ASSIGNING <lfs_index_csv>
        WHERE object_type EQ gc_object_type_program.
        CONCATENATE iv_dir '\' <lfs_index_csv>-file INTO lv_file.
        CASE <lfs_index_csv>-content_type.
          WHEN gc_content_type_attributes.
            lv_progname = <lfs_index_csv>-object_name.
            CALL METHOD me->export_program_attributes
              EXPORTING
                iv_progname       = lv_progname
                iv_file           = lv_file
              EXCEPTIONS
                no_program_found  = 1
                create_file_error = 2.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Program not found or not active' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Cannot create file' TYPE 'S'.
                RETURN.
            ENDCASE.
          WHEN gc_content_type_source_code.
            lv_progname = <lfs_index_csv>-object_name.
            CALL METHOD me->export_program_source_code
              EXPORTING
                iv_progname       = lv_progname
                iv_file           = lv_file
              EXCEPTIONS
                no_program_found  = 1
                create_file_error = 2.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Program not found or not active' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Cannot create file' TYPE 'S'.
                RETURN.
            ENDCASE.
        ENDCASE.
      ENDLOOP.
    ENDIF.

    IF iv_p_tran EQ gc_abap_on.
      LOOP AT lt_index_csv ASSIGNING <lfs_index_csv>
        WHERE object_type EQ gc_object_type_transaction.
        CONCATENATE iv_dir '\' <lfs_index_csv>-file INTO lv_file.
        CASE <lfs_index_csv>-content_type.
          WHEN gc_content_type_attributes.
            lv_tcode = <lfs_index_csv>-object_name.
            CALL METHOD me->export_transaction_attributes
              EXPORTING
                iv_tcode             = lv_tcode
                iv_file              = lv_file
              EXCEPTIONS
                no_transaction_found = 1
                create_file_error    = 2.

            CASE sy-subrc.
              WHEN 1.
                MESSAGE 'Transaction not found or not active' TYPE 'S'.
                RETURN.
              WHEN 2.
                MESSAGE 'Cannot create file' TYPE 'S'.
                RETURN.
            ENDCASE.
        ENDCASE.
      ENDLOOP.
    ENDIF.

    CONCATENATE iv_dir '\index.csv' INTO lv_file.
    CALL METHOD me->write_data_to_csv
      EXPORTING
        iv_file           = lv_file
        it_data           = lt_index_csv
      EXCEPTIONS
        create_file_error = 1.

    IF sy-subrc IS NOT INITIAL.
      MESSAGE 'Cannot create index file' TYPE 'S'.
      RETURN.
    ENDIF.

    MESSAGE 'All done' TYPE 'S'.

  ENDMETHOD.

  METHOD export_domain_attributes.

    DATA: ls_dd01l           TYPE dd01l,
          ls_dd01t           TYPE dd01t,
          lt_domain_attr_csv TYPE type_domain_attr_csv_t.

    FIELD-SYMBOLS: <lfs_domain_attr_csv> TYPE type_domain_attr_csv,
                   <lv_field>            TYPE any.

    SELECT SINGLE *
      FROM dd01l
      INTO CORRESPONDING FIELDS OF ls_dd01l
     WHERE domname EQ iv_domname
       AND as4local EQ 'A'
       AND as4vers EQ '0000'.

    IF sy-subrc IS NOT INITIAL.
      RAISE no_domain_found.
    ENDIF.

    SELECT SINGLE *
      FROM dd01t
      INTO CORRESPONDING FIELDS OF ls_dd01t
     WHERE domname EQ iv_domname
       AND ddlanguage EQ 'EN'
       AND as4local EQ 'A'
       AND as4vers EQ '0000'.

    IF sy-subrc IS NOT INITIAL.
      RAISE no_domain_found.
    ENDIF.

    APPEND INITIAL LINE TO lt_domain_attr_csv ASSIGNING <lfs_domain_attr_csv>.
    ASSIGN COMPONENT 'DDTEXT' OF STRUCTURE ls_dd01t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_domain_attr_csv>-ddtext = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'DATATYPE' OF STRUCTURE ls_dd01l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_domain_attr_csv>-datatype = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'LENG' OF STRUCTURE ls_dd01l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_domain_attr_csv>-leng = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'OUTPUTLEN' OF STRUCTURE ls_dd01l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_domain_attr_csv>-outputlen = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'DECIMALS' OF STRUCTURE ls_dd01l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_domain_attr_csv>-decimals = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'LOWERCASE' OF STRUCTURE ls_dd01l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_domain_attr_csv>-lowercase = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'SIGNFLAG' OF STRUCTURE ls_dd01l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_domain_attr_csv>-signflag = <lv_field>.
    ENDIF.

    CALL METHOD write_data_to_csv
      EXPORTING
        iv_file           = iv_file
        it_data           = lt_domain_attr_csv
      EXCEPTIONS
        create_file_error = 1.

    IF sy-subrc IS NOT INITIAL.
      RAISE create_file_error.
    ENDIF.

  ENDMETHOD.

  METHOD export_data_element_attributes.

    DATA: ls_dd04l                 TYPE dd04l,
          ls_dd04t                 TYPE dd04t,
          lt_data_element_attr_csv TYPE type_data_element_attr_csv_t.

    FIELD-SYMBOLS: <lfs_data_element_attr_csv> TYPE type_data_element_attr_csv,
                   <lv_field>                  TYPE any.

    SELECT SINGLE *
      FROM dd04l
      INTO CORRESPONDING FIELDS OF ls_dd04l
     WHERE rollname EQ iv_rollname
       AND as4local EQ 'A'
       AND as4vers EQ '0000'.

    IF sy-subrc IS NOT INITIAL.
      RAISE no_data_element_found.
    ENDIF.

    SELECT SINGLE *
      FROM dd04t
      INTO CORRESPONDING FIELDS OF ls_dd04t
     WHERE rollname EQ iv_rollname
       AND ddlanguage EQ 'EN'
       AND as4local EQ 'A'
       AND as4vers EQ '0000'.

    IF sy-subrc IS NOT INITIAL.
      RAISE no_data_element_found.
    ENDIF.

    APPEND INITIAL LINE TO lt_data_element_attr_csv ASSIGNING <lfs_data_element_attr_csv>.
    ASSIGN COMPONENT 'DDTEXT' OF STRUCTURE ls_dd04t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_data_element_attr_csv>-ddtext = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'DOMNAME' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_data_element_attr_csv>-domname = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'HEADLEN' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_data_element_attr_csv>-headlen = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'SCRLEN1' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_data_element_attr_csv>-scrlen1 = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'SCRLEN2' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_data_element_attr_csv>-scrlen2 = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'SCRLEN3' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_data_element_attr_csv>-scrlen3 = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'DTELMASTER' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_data_element_attr_csv>-dtelmaster = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'DATATYPE' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_data_element_attr_csv>-datatype = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'LENG' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_data_element_attr_csv>-leng = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'DECIMALS' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_data_element_attr_csv>-decimals = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'OUTPUTLEN' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_data_element_attr_csv>-outputlen = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'LOWERCASE' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_data_element_attr_csv>-lowercase = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'SIGNFLAG' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_data_element_attr_csv>-signflag = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'REFKIND' OF STRUCTURE ls_dd04l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_data_element_attr_csv>-refkind = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'REPTEXT' OF STRUCTURE ls_dd04t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_data_element_attr_csv>-reptext = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'SCRTEXT_S' OF STRUCTURE ls_dd04t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_data_element_attr_csv>-scrtext_s = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'SCRTEXT_M' OF STRUCTURE ls_dd04t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_data_element_attr_csv>-scrtext_m = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'SCRTEXT_L' OF STRUCTURE ls_dd04t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_data_element_attr_csv>-scrtext_l = <lv_field>.
    ENDIF.

    CALL METHOD write_data_to_csv
      EXPORTING
        iv_file           = iv_file
        it_data           = lt_data_element_attr_csv
      EXCEPTIONS
        create_file_error = 1.

    IF sy-subrc IS NOT INITIAL.
      RAISE create_file_error.
    ENDIF.

  ENDMETHOD.

  METHOD export_structure_attributes.

    DATA: ls_dd02l              TYPE dd02l,
          ls_dd02t              TYPE dd02t,
          lt_structure_attr_csv TYPE type_structure_attr_csv_t.

    FIELD-SYMBOLS: <lfs_structure_attr_csv> TYPE type_structure_attr_csv,
                   <lv_field>               TYPE any.

    SELECT SINGLE *
      FROM dd02l
      INTO CORRESPONDING FIELDS OF ls_dd02l
     WHERE tabname EQ iv_tabname
       AND as4local EQ 'A'
       AND as4vers EQ '0000'.

    IF sy-subrc IS NOT INITIAL.
      RAISE no_structure_found.
    ENDIF.

    SELECT SINGLE *
      FROM dd02t
      INTO CORRESPONDING FIELDS OF ls_dd02t
     WHERE tabname EQ iv_tabname
       AND ddlanguage EQ 'EN'
       AND as4local EQ 'A'
       AND as4vers EQ '0000'.

    IF sy-subrc IS NOT INITIAL.
      RAISE no_structure_found.
    ENDIF.

    APPEND INITIAL LINE TO lt_structure_attr_csv ASSIGNING <lfs_structure_attr_csv>.
    ASSIGN COMPONENT 'DDTEXT' OF STRUCTURE ls_dd02t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_structure_attr_csv>-ddtext = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'TABCLASS' OF STRUCTURE ls_dd02l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_structure_attr_csv>-tabclass = <lv_field>.
    ENDIF.

    CALL METHOD write_data_to_csv
      EXPORTING
        iv_file           = iv_file
        it_data           = lt_structure_attr_csv
      EXCEPTIONS
        create_file_error = 1.

    IF sy-subrc IS NOT INITIAL.
      RAISE create_file_error.
    ENDIF.

  ENDMETHOD.

  METHOD export_structure_fields.

    DATA: lt_dd03l                TYPE TABLE OF dd03l,
          lt_dd03t                TYPE SORTED TABLE OF dd03t WITH UNIQUE KEY fieldname,
          lt_structure_fields_csv TYPE type_structure_fields_csv_t.

    FIELD-SYMBOLS: <lfs_dd03l>                TYPE dd03l,
                   <lfs_dd03t>                TYPE dd03t,
                   <lfs_structure_fields_csv> TYPE type_structure_fields_csv,
                   <lv_field>                 TYPE any.

    SELECT *
      FROM dd03l
      INTO CORRESPONDING FIELDS OF TABLE lt_dd03l
     WHERE tabname EQ iv_tabname
       AND as4local EQ 'A'
       AND as4vers EQ '0000'
     ORDER BY position.

    IF sy-subrc IS NOT INITIAL.
      RAISE no_structure_found.
    ENDIF.

    SELECT *
      FROM dd03t
      INTO CORRESPONDING FIELDS OF TABLE lt_dd03t
     WHERE tabname EQ iv_tabname
       AND as4local EQ 'A'.

    LOOP AT lt_dd03l ASSIGNING <lfs_dd03l>.
      APPEND INITIAL LINE TO lt_structure_fields_csv ASSIGNING <lfs_structure_fields_csv>.
      READ TABLE lt_dd03t ASSIGNING <lfs_dd03t>
      WITH TABLE KEY fieldname = <lfs_dd03l>-fieldname.
      IF sy-subrc IS INITIAL.
        ASSIGN COMPONENT 'DDTEXT' OF STRUCTURE <lfs_dd03t> TO <lv_field>.
        IF sy-subrc IS INITIAL.
          <lfs_structure_fields_csv>-ddtext = <lv_field>.
        ENDIF.
      ENDIF.
      ASSIGN COMPONENT 'FIELDNAME' OF STRUCTURE <lfs_dd03l> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_structure_fields_csv>-fieldname = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'POSITION' OF STRUCTURE <lfs_dd03l> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_structure_fields_csv>-position = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'ROLLNAME' OF STRUCTURE <lfs_dd03l> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_structure_fields_csv>-rollname = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'ADMINFIELD' OF STRUCTURE <lfs_dd03l> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_structure_fields_csv>-adminfield = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'INTTYPE' OF STRUCTURE <lfs_dd03l> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_structure_fields_csv>-inttype = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'INTLEN' OF STRUCTURE <lfs_dd03l> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_structure_fields_csv>-intlen = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'DATATYPE' OF STRUCTURE <lfs_dd03l> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_structure_fields_csv>-datatype = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'LENG' OF STRUCTURE <lfs_dd03l> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_structure_fields_csv>-leng = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'DECIMALS' OF STRUCTURE <lfs_dd03l> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_structure_fields_csv>-decimals = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'DOMNAME' OF STRUCTURE <lfs_dd03l> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_structure_fields_csv>-domname = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'COMPTYPE' OF STRUCTURE <lfs_dd03l> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_structure_fields_csv>-comptype = <lv_field>.
      ENDIF.
    ENDLOOP.

    CALL METHOD write_data_to_csv
      EXPORTING
        iv_file           = iv_file
        it_data           = lt_structure_fields_csv
      EXCEPTIONS
        create_file_error = 1.

    IF sy-subrc IS NOT INITIAL.
      RAISE create_file_error.
    ENDIF.

  ENDMETHOD.

  METHOD export_table_type_attributes.

    DATA: ls_dd40l               TYPE dd40l,
          ls_dd40t               TYPE dd40t,
          lt_table_type_attr_csv TYPE type_table_type_attr_csv_t.

    FIELD-SYMBOLS: <lfs_table_type_attr_csv> TYPE type_table_type_attr_csv,
                   <lv_field>                TYPE any.

    SELECT SINGLE *
      FROM dd40l
      INTO CORRESPONDING FIELDS OF ls_dd40l
     WHERE typename EQ iv_typename
       AND as4local EQ 'A'.

    IF sy-subrc IS NOT INITIAL.
      RAISE no_table_type_found.
    ENDIF.

    SELECT SINGLE *
      FROM dd40t
      INTO CORRESPONDING FIELDS OF ls_dd40t
     WHERE typename EQ iv_typename
       AND ddlanguage EQ 'EN'
       AND as4local EQ 'A'.

    IF sy-subrc IS NOT INITIAL.
      RAISE no_table_type_found.
    ENDIF.

    APPEND INITIAL LINE TO lt_table_type_attr_csv ASSIGNING <lfs_table_type_attr_csv>.
    ASSIGN COMPONENT 'DDTEXT' OF STRUCTURE ls_dd40t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_table_type_attr_csv>-ddtext = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'ROWTYPE' OF STRUCTURE ls_dd40l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_table_type_attr_csv>-rowtype = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'ROWKIND' OF STRUCTURE ls_dd40l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_table_type_attr_csv>-rowkind = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'ROWKIND' OF STRUCTURE ls_dd40l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_table_type_attr_csv>-rowkind = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'DATATYPE' OF STRUCTURE ls_dd40l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_table_type_attr_csv>-datatype = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'ACCESSMODE' OF STRUCTURE ls_dd40l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_table_type_attr_csv>-accessmode = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'KEYDEF' OF STRUCTURE ls_dd40l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_table_type_attr_csv>-keydef = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'KEYKIND' OF STRUCTURE ls_dd40l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_table_type_attr_csv>-keykind = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'TYPELEN' OF STRUCTURE ls_dd40l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_table_type_attr_csv>-typelen = <lv_field>.
    ENDIF.

    CALL METHOD write_data_to_csv
      EXPORTING
        iv_file           = iv_file
        it_data           = lt_table_type_attr_csv
      EXCEPTIONS
        create_file_error = 1.

    IF sy-subrc IS NOT INITIAL.
      RAISE create_file_error.
    ENDIF.

  ENDMETHOD.

  METHOD export_transp_table_attributes.

    DATA: ls_dd02l                 TYPE dd02l,
          ls_dd02t                 TYPE dd02t,
          ls_dd09l                 TYPE dd09l,
          lt_transp_table_attr_csv TYPE type_transp_table_attr_csv_t.

    FIELD-SYMBOLS: <lfs_transp_table_attr_csv> TYPE type_transp_table_attr_csv,
                   <lv_field>                  TYPE any.

    SELECT SINGLE *
      FROM dd02l
      INTO CORRESPONDING FIELDS OF ls_dd02l
     WHERE tabname EQ iv_tabname
       AND as4local EQ 'A'
       AND as4vers EQ '0000'.

    IF sy-subrc IS NOT INITIAL.
      RAISE no_transp_table_found.
    ENDIF.

    SELECT SINGLE *
      FROM dd02t
      INTO CORRESPONDING FIELDS OF ls_dd02t
     WHERE tabname EQ iv_tabname
       AND ddlanguage EQ 'EN'
       AND as4local EQ 'A'
       AND as4vers EQ '0000'.

    IF sy-subrc IS NOT INITIAL.
      RAISE no_transp_table_found.
    ENDIF.

    SELECT SINGLE *
      FROM dd09l
      INTO CORRESPONDING FIELDS OF ls_dd09l
     WHERE tabname EQ iv_tabname
       AND as4local EQ 'A'
       AND as4vers EQ '0000'.

    APPEND INITIAL LINE TO lt_transp_table_attr_csv ASSIGNING <lfs_transp_table_attr_csv>.
    ASSIGN COMPONENT 'DDTEXT' OF STRUCTURE ls_dd02t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_transp_table_attr_csv>-ddtext = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'TABCLASS' OF STRUCTURE ls_dd02l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_transp_table_attr_csv>-tabclass = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'CLIDEP' OF STRUCTURE ls_dd02l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_transp_table_attr_csv>-clidep = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'MAINFLAG' OF STRUCTURE ls_dd02l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_transp_table_attr_csv>-mainflag = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'CONTFLAG' OF STRUCTURE ls_dd02l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_transp_table_attr_csv>-contflag = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'TABKAT' OF STRUCTURE ls_dd09l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_transp_table_attr_csv>-tabkat = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'TABART' OF STRUCTURE ls_dd09l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_transp_table_attr_csv>-tabart = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'BUFALLOW' OF STRUCTURE ls_dd09l TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_transp_table_attr_csv>-bufallow = <lv_field>.
    ENDIF.

    CALL METHOD write_data_to_csv
      EXPORTING
        iv_file           = iv_file
        it_data           = lt_transp_table_attr_csv
      EXCEPTIONS
        create_file_error = 1.

    IF sy-subrc IS NOT INITIAL.
      RAISE create_file_error.
    ENDIF.

  ENDMETHOD.

  METHOD export_transp_table_fields.

    DATA: lt_dd03l                   TYPE TABLE OF dd03l,
          lt_dd03t                   TYPE SORTED TABLE OF dd03t WITH UNIQUE KEY fieldname,
          lt_transp_table_fields_csv TYPE type_transp_table_fields_csv_t.

    FIELD-SYMBOLS: <lfs_dd03l>                   TYPE dd03l,
                   <lfs_dd03t>                   TYPE dd03t,
                   <lfs_transp_table_fields_csv> TYPE type_transp_table_fields_csv,
                   <lv_field>                    TYPE any.

    SELECT *
      FROM dd03l
      INTO CORRESPONDING FIELDS OF TABLE lt_dd03l
     WHERE tabname EQ iv_tabname
       AND as4local EQ 'A'
       AND as4vers EQ '0000'
     ORDER BY position.

    IF sy-subrc IS NOT INITIAL.
      RAISE no_transp_table_found.
    ENDIF.

    SELECT *
      FROM dd03t
      INTO CORRESPONDING FIELDS OF TABLE lt_dd03t
     WHERE tabname EQ iv_tabname
       AND as4local EQ 'A'.

    LOOP AT lt_dd03l ASSIGNING <lfs_dd03l>.
      APPEND INITIAL LINE TO lt_transp_table_fields_csv ASSIGNING <lfs_transp_table_fields_csv>.
      READ TABLE lt_dd03t ASSIGNING <lfs_dd03t>
      WITH TABLE KEY fieldname = <lfs_dd03l>-fieldname.
      IF sy-subrc IS INITIAL.
        ASSIGN COMPONENT 'DDTEXT' OF STRUCTURE <lfs_dd03t> TO <lv_field>.
        IF sy-subrc IS INITIAL.
          <lfs_transp_table_fields_csv>-ddtext = <lv_field>.
        ENDIF.
      ENDIF.
      ASSIGN COMPONENT 'FIELDNAME' OF STRUCTURE <lfs_dd03l> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_transp_table_fields_csv>-fieldname = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'POSITION' OF STRUCTURE <lfs_dd03l> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_transp_table_fields_csv>-position = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'KEYFLAG' OF STRUCTURE <lfs_dd03l> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_transp_table_fields_csv>-keyflag = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'ROLLNAME' OF STRUCTURE <lfs_dd03l> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_transp_table_fields_csv>-rollname = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'ADMINFIELD' OF STRUCTURE <lfs_dd03l> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_transp_table_fields_csv>-adminfield = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'INTTYPE' OF STRUCTURE <lfs_dd03l> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_transp_table_fields_csv>-inttype = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'INTLEN' OF STRUCTURE <lfs_dd03l> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_transp_table_fields_csv>-intlen = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'NOTNULL' OF STRUCTURE <lfs_dd03l> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_transp_table_fields_csv>-notnull = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'DATATYPE' OF STRUCTURE <lfs_dd03l> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_transp_table_fields_csv>-datatype = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'LENG' OF STRUCTURE <lfs_dd03l> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_transp_table_fields_csv>-leng = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'DECIMALS' OF STRUCTURE <lfs_dd03l> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_transp_table_fields_csv>-decimals = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'DOMNAME' OF STRUCTURE <lfs_dd03l> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_transp_table_fields_csv>-domname = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'COMPTYPE' OF STRUCTURE <lfs_dd03l> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_transp_table_fields_csv>-comptype = <lv_field>.
      ENDIF.
    ENDLOOP.

    CALL METHOD write_data_to_csv
      EXPORTING
        iv_file           = iv_file
        it_data           = lt_transp_table_fields_csv
      EXCEPTIONS
        create_file_error = 1.

    IF sy-subrc IS NOT INITIAL.
      RAISE create_file_error.
    ENDIF.

  ENDMETHOD.

  METHOD export_transp_table_data.

    DATA: lo_typedescr   TYPE REF TO cl_abap_typedescr,
          lo_structdescr TYPE REF TO cl_abap_structdescr,
          lo_tabledescr  TYPE REF TO cl_abap_tabledescr,
          lo_data        TYPE REF TO data.

    FIELD-SYMBOLS: <lfs_transp_table_data_csv> TYPE table,
                   <lfs_line>                  TYPE any,
                   <lfs_field>                 TYPE any.

    CALL METHOD cl_abap_structdescr=>describe_by_name
      EXPORTING
        p_name      = iv_tabname
      RECEIVING
        p_descr_ref = lo_typedescr.

    lo_structdescr ?= lo_typedescr.

    CALL METHOD cl_abap_tabledescr=>create
      EXPORTING
        p_line_type = lo_structdescr
      RECEIVING
        p_result    = lo_tabledescr.

    CREATE DATA lo_data TYPE HANDLE lo_tabledescr.
    ASSIGN lo_data->* TO <lfs_transp_table_data_csv>.

    SELECT *
      FROM (iv_tabname)
      INTO TABLE <lfs_transp_table_data_csv>.

    LOOP AT <lfs_transp_table_data_csv> ASSIGNING <lfs_line>.
      ASSIGN COMPONENT 'MANDT' OF STRUCTURE <lfs_line> TO <lfs_field>.
      CHECK sy-subrc IS INITIAL.
      CLEAR <lfs_field>.
    ENDLOOP.

    CALL METHOD write_data_to_csv
      EXPORTING
        iv_file           = iv_file
        it_data           = <lfs_transp_table_data_csv>
      EXCEPTIONS
        create_file_error = 1.

    IF sy-subrc IS NOT INITIAL.
      RAISE create_file_error.
    ENDIF.

  ENDMETHOD.

  METHOD export_mess_class_attributes.

    DATA: ls_t100a               TYPE t100a,
          ls_t100t               TYPE t100t,
          lt_mess_class_attr_csv TYPE type_mess_class_attr_csv_t.

    FIELD-SYMBOLS: <lfs_mess_class_attr_csv> TYPE type_mess_class_attr_csv,
                   <lv_field>                TYPE any.

    SELECT SINGLE *
      FROM t100a
      INTO CORRESPONDING FIELDS OF ls_t100a
     WHERE arbgb EQ iv_mcname.

    IF sy-subrc IS NOT INITIAL.
      RAISE no_mess_class_found.
    ENDIF.

    SELECT SINGLE *
      FROM t100t
      INTO CORRESPONDING FIELDS OF ls_t100t
     WHERE sprsl EQ 'E'
       AND arbgb EQ iv_mcname.

    IF sy-subrc IS NOT INITIAL.
      RAISE no_mess_class_found.
    ENDIF.

    APPEND INITIAL LINE TO lt_mess_class_attr_csv ASSIGNING <lfs_mess_class_attr_csv>.
    ASSIGN COMPONENT 'STEXT' OF STRUCTURE ls_t100t TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_mess_class_attr_csv>-stext = <lv_field>.
    ENDIF.

    CALL METHOD write_data_to_csv
      EXPORTING
        iv_file           = iv_file
        it_data           = lt_mess_class_attr_csv
      EXCEPTIONS
        create_file_error = 1.

    IF sy-subrc IS NOT INITIAL.
      RAISE create_file_error.
    ENDIF.

  ENDMETHOD.

  METHOD export_mess_class_messages.

    DATA: lt_t100                    TYPE TABLE OF t100,
          lt_t100u                   TYPE SORTED TABLE OF t100u WITH UNIQUE KEY msgnr,
          lt_mess_class_messages_csv TYPE type_mess_class_messages_csv_t.

    FIELD-SYMBOLS: <lfs_t100>                    TYPE t100,
                   <lfs_t100u>                   TYPE t100u,
                   <lfs_mess_class_messages_csv> TYPE type_mess_class_messages_csv,
                   <lv_field>                    TYPE any.

    SELECT *
      FROM t100
      INTO CORRESPONDING FIELDS OF TABLE lt_t100
     WHERE sprsl EQ 'E'
       AND arbgb EQ iv_mcname.

    IF sy-subrc IS NOT INITIAL.
      RAISE no_messages_found.
    ENDIF.

    SELECT *
      FROM t100u
      INTO CORRESPONDING FIELDS OF TABLE lt_t100u
     WHERE arbgb EQ iv_mcname.

    LOOP AT lt_t100 ASSIGNING <lfs_t100>.
      APPEND INITIAL LINE TO lt_mess_class_messages_csv ASSIGNING <lfs_mess_class_messages_csv>.
      ASSIGN COMPONENT 'MSGNR' OF STRUCTURE <lfs_t100> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_mess_class_messages_csv>-msgnr = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'TEXT' OF STRUCTURE <lfs_t100> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_mess_class_messages_csv>-text = <lv_field>.
      ENDIF.

      READ TABLE lt_t100u ASSIGNING <lfs_t100u>
      WITH TABLE KEY msgnr = <lfs_t100>-msgnr.
      IF sy-subrc IS INITIAL.
        ASSIGN COMPONENT 'SELFDEF' OF STRUCTURE <lfs_t100u> TO <lv_field>.
        IF sy-subrc IS INITIAL.
          <lfs_mess_class_messages_csv>-selfdef = <lv_field>.
        ENDIF.
      ENDIF.
    ENDLOOP.

    CALL METHOD write_data_to_csv
      EXPORTING
        iv_file           = iv_file
        it_data           = lt_mess_class_messages_csv
      EXCEPTIONS
        create_file_error = 1.

    IF sy-subrc IS NOT INITIAL.
      RAISE create_file_error.
    ENDIF.

  ENDMETHOD.

  METHOD export_search_help_attributes.

    DATA: ls_dd30v                TYPE dd30v,
          lt_search_help_attr_csv TYPE type_search_help_attr_csv_t.

    FIELD-SYMBOLS: <lfs_search_help_attr_csv> TYPE type_search_help_attr_csv,
                   <lv_field>                 TYPE any.

    CALL FUNCTION 'DDIF_SHLP_GET'
      EXPORTING
        name          = iv_shlpname
        langu         = 'E'
      IMPORTING
        dd30v_wa      = ls_dd30v
      EXCEPTIONS
        illegal_input = 1
        OTHERS        = 2.

    IF sy-subrc IS NOT INITIAL.
      RAISE no_search_help_found.
    ENDIF.

    APPEND INITIAL LINE TO lt_search_help_attr_csv ASSIGNING <lfs_search_help_attr_csv>.
    ASSIGN COMPONENT 'DDLANGUAGE' OF STRUCTURE ls_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_search_help_attr_csv>-ddlanguage = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'DDTEXT' OF STRUCTURE ls_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_search_help_attr_csv>-ddtext = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'ISSIMPLE' OF STRUCTURE ls_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_search_help_attr_csv>-issimple = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'ELEMEXI' OF STRUCTURE ls_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_search_help_attr_csv>-elemexi = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'NOFIELDS' OF STRUCTURE ls_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_search_help_attr_csv>-nofields = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'ATTACHEXI' OF STRUCTURE ls_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_search_help_attr_csv>-attachexi = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'SELMETHOD' OF STRUCTURE ls_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_search_help_attr_csv>-selmethod = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'SELMTYPE' OF STRUCTURE ls_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_search_help_attr_csv>-selmtype = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'TEXTTAB' OF STRUCTURE ls_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_search_help_attr_csv>-texttab = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'SELMEXIT' OF STRUCTURE ls_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_search_help_attr_csv>-selmexit = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'HOTKEY' OF STRUCTURE ls_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_search_help_attr_csv>-hotkey = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'DIALOGTYPE' OF STRUCTURE ls_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_search_help_attr_csv>-dialogtype = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'AUTOSUGGEST' OF STRUCTURE ls_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_search_help_attr_csv>-autosuggest = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'FUZZY_SEARCH' OF STRUCTURE ls_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_search_help_attr_csv>-fuzzy_search = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'FUZZY_SIMILARITY' OF STRUCTURE ls_dd30v TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_search_help_attr_csv>-fuzzy_similarity = <lv_field>.
    ENDIF.

*импорт
*+
*AS4USER
*AS4DATE
*AS4TIME

    CALL METHOD write_data_to_csv
      EXPORTING
        iv_file           = iv_file
        it_data           = lt_search_help_attr_csv
      EXCEPTIONS
        create_file_error = 1.

    IF sy-subrc IS NOT INITIAL.
      RAISE create_file_error.
    ENDIF.

  ENDMETHOD.

  METHOD export_search_help_parameters.

    DATA: lt_dd32p                  TYPE TABLE OF dd32p,
          lt_search_help_params_csv TYPE type_search_help_params_csv_t.

    FIELD-SYMBOLS: <lfs_search_help_params_csv> TYPE type_search_help_params_csv,
                   <lfs_dd32p>                  TYPE dd32p,
                   <lv_field>                   TYPE any.

    CALL FUNCTION 'DDIF_SHLP_GET'
      EXPORTING
        name          = iv_shlpname
        langu         = 'E'
      TABLES
        dd32p_tab     = lt_dd32p
      EXCEPTIONS
        illegal_input = 1
        OTHERS        = 2.

    IF sy-subrc IS NOT INITIAL.
      RAISE no_search_help_found.
    ENDIF.

    LOOP AT lt_dd32p ASSIGNING <lfs_dd32p>.
      APPEND INITIAL LINE TO lt_search_help_params_csv ASSIGNING <lfs_search_help_params_csv>.
      ASSIGN COMPONENT 'FIELDNAME' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_search_help_params_csv>-fieldname = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'FLPOSITION' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_search_help_params_csv>-flposition = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'ROLLNAME' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_search_help_params_csv>-rollname = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'SHLPINPUT' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_search_help_params_csv>-shlpinput = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'SHLPOUTPUT' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_search_help_params_csv>-shlpoutput = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'SHLPSELPOS' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_search_help_params_csv>-shlpselpos = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'SHLPSELDIS' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_search_help_params_csv>-shlpseldis = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'SHLPLISPOS' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_search_help_params_csv>-shlplispos = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'SHLPUPPER' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_search_help_params_csv>-shlpupper = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'DEFAULTVAL' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_search_help_params_csv>-defaultval = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'DEFAULTTYP' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_search_help_params_csv>-defaulttyp = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'SQLTAB' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_search_help_params_csv>-sqltab = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'ROLLCHANGE' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_search_help_params_csv>-rollchange = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'INDEXNAME' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_search_help_params_csv>-indexname = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'DOMNAME' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_search_help_params_csv>-domname = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'HEADLEN' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_search_help_params_csv>-headlen = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'SCRLEN1' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_search_help_params_csv>-scrlen1 = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'SCRLEN2' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_search_help_params_csv>-scrlen2 = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'SCRLEN3' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_search_help_params_csv>-scrlen3 = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'DATATYPE' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_search_help_params_csv>-datatype = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'LENG' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_search_help_params_csv>-leng = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'OUTPUTLEN' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_search_help_params_csv>-outputlen = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'DECIMALS' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_search_help_params_csv>-decimals = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'LOWERCASE' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_search_help_params_csv>-lowercase = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'SIGNFLAG' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_search_help_params_csv>-signflag = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'CONVEXIT' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_search_help_params_csv>-convexit = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'PROXYTYPE' OF STRUCTURE <lfs_dd32p> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_search_help_params_csv>-proxytype = <lv_field>.
      ENDIF.
    ENDLOOP.

    CALL METHOD write_data_to_csv
      EXPORTING
        iv_file           = iv_file
        it_data           = lt_search_help_params_csv
      EXCEPTIONS
        create_file_error = 1.

    IF sy-subrc IS NOT INITIAL.
      RAISE create_file_error.
    ENDIF.

  ENDMETHOD.

  METHOD export_func_grp_attributes.

    DATA: ls_tlibg             TYPE tlibg,
          ls_tlibt             TYPE tlibt,
          lt_func_grp_attr_csv TYPE type_func_grp_attr_csv_t.

    FIELD-SYMBOLS: <lfs_func_grp_attr_csv> TYPE type_func_grp_attr_csv,
                   <lv_field>              TYPE any.

    SELECT SINGLE *
      FROM tlibg
      INTO CORRESPONDING FIELDS OF ls_tlibg
     WHERE area EQ iv_fungname.

    IF sy-subrc IS NOT INITIAL.
      RAISE no_function_group_found.
    ENDIF.

    SELECT SINGLE *
      FROM tlibt
      INTO CORRESPONDING FIELDS OF ls_tlibt
     WHERE spras EQ 'E'
       AND area EQ iv_fungname.

    IF sy-subrc IS NOT INITIAL.
      RAISE no_function_group_found.
    ENDIF.

    APPEND INITIAL LINE TO lt_func_grp_attr_csv ASSIGNING <lfs_func_grp_attr_csv>.
    ASSIGN COMPONENT 'AREA' OF STRUCTURE ls_tlibg TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_func_grp_attr_csv>-fungname = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'AREAT' OF STRUCTURE ls_tlibt TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_func_grp_attr_csv>-areat = <lv_field>.
    ENDIF.

    CALL METHOD write_data_to_csv
      EXPORTING
        iv_file           = iv_file
        it_data           = lt_func_grp_attr_csv
      EXCEPTIONS
        create_file_error = 1.

    IF sy-subrc IS NOT INITIAL.
      RAISE create_file_error.
    ENDIF.

  ENDMETHOD.

  METHOD export_function_attributes.

    DATA: ls_tfdir             TYPE tfdir,
          ls_tftit             TYPE tftit,
          ls_enlfdir           TYPE enlfdir,
          lt_function_attr_csv TYPE type_function_attr_csv_t.

    FIELD-SYMBOLS: <lfs_function_attr_csv> TYPE type_function_attr_csv,
                   <lv_field>              TYPE any.

    SELECT SINGLE *
      FROM tfdir
      INTO CORRESPONDING FIELDS OF ls_tfdir
     WHERE funcname EQ iv_funcname.

    IF sy-subrc IS NOT INITIAL.
      RAISE no_function_found.
    ENDIF.

    SELECT SINGLE *
      FROM tftit
      INTO CORRESPONDING FIELDS OF ls_tftit
     WHERE spras EQ 'E'
       AND funcname EQ iv_funcname.

    IF sy-subrc IS NOT INITIAL.
      RAISE no_function_found.
    ENDIF.

    SELECT SINGLE *
      FROM enlfdir
      INTO CORRESPONDING FIELDS OF ls_enlfdir
     WHERE funcname EQ iv_funcname.

    IF sy-subrc IS NOT INITIAL.
      RAISE no_function_found.
    ENDIF.

    APPEND INITIAL LINE TO lt_function_attr_csv ASSIGNING <lfs_function_attr_csv>.
    ASSIGN COMPONENT 'FUNCNAME' OF STRUCTURE ls_tfdir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_function_attr_csv>-funcname = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'PNAME' OF STRUCTURE ls_tfdir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_function_attr_csv>-pname = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'INCLUDE' OF STRUCTURE ls_tfdir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_function_attr_csv>-include = <lv_field>.
    ENDIF.

    ASSIGN COMPONENT 'STEXT' OF STRUCTURE ls_tftit TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_function_attr_csv>-stext = <lv_field>.
    ENDIF.

    ASSIGN COMPONENT 'FUNCNAME' OF STRUCTURE ls_enlfdir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_function_attr_csv>-funcname = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'AREA' OF STRUCTURE ls_enlfdir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_function_attr_csv>-area = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'ACTIVE' OF STRUCTURE ls_enlfdir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_function_attr_csv>-active = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'GENERATED' OF STRUCTURE ls_enlfdir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_function_attr_csv>-generated = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'FREEDATE' OF STRUCTURE ls_enlfdir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_function_attr_csv>-freedate = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'GLOBAL' OF STRUCTURE ls_enlfdir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_function_attr_csv>-global = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'LOC_PRIV' OF STRUCTURE ls_enlfdir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_function_attr_csv>-loc_priv = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'EXTEN1' OF STRUCTURE ls_enlfdir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_function_attr_csv>-exten1 = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'EXTEN2' OF STRUCTURE ls_enlfdir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_function_attr_csv>-exten2 = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'EXTEN3' OF STRUCTURE ls_enlfdir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_function_attr_csv>-exten3 = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'EXTEN4' OF STRUCTURE ls_enlfdir TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_function_attr_csv>-exten4 = <lv_field>.
    ENDIF.

    CALL METHOD write_data_to_csv
      EXPORTING
        iv_file           = iv_file
        it_data           = lt_function_attr_csv
      EXCEPTIONS
        create_file_error = 1.

    IF sy-subrc IS NOT INITIAL.
      RAISE create_file_error.
    ENDIF.

  ENDMETHOD.

  METHOD export_function_parameters.

    DATA: ls_tfdir               TYPE tfdir,
          lt_fupararef           TYPE TABLE OF fupararef,
          lt_function_params_csv TYPE type_function_params_csv_t.

    FIELD-SYMBOLS: <lfs_function_params_csv> TYPE type_function_params_csv,
                   <lv_field>                TYPE any.

    SELECT SINGLE *
      FROM tfdir
      INTO CORRESPONDING FIELDS OF ls_tfdir
     WHERE funcname EQ iv_funcname.

    IF sy-subrc IS NOT INITIAL.
      RAISE no_function_found.
    ENDIF.

    SELECT *
      FROM fupararef
      INTO CORRESPONDING FIELDS OF TABLE lt_fupararef
     WHERE funcname EQ iv_funcname.

    LOOP AT lt_fupararef ASSIGNING FIELD-SYMBOL(<lfs_fupararef>).
      APPEND INITIAL LINE TO lt_function_params_csv ASSIGNING <lfs_function_params_csv>.
      ASSIGN COMPONENT 'FUNCNAME' OF STRUCTURE <lfs_fupararef> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_function_params_csv>-funcname = <lv_field>.
      ENDIF.

      ASSIGN COMPONENT 'R3STATE' OF STRUCTURE <lfs_fupararef> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_function_params_csv>-r3state = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'PARAMETER' OF STRUCTURE <lfs_fupararef> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_function_params_csv>-parameter = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'PARAMTYPE' OF STRUCTURE <lfs_fupararef> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_function_params_csv>-paramtype = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'STRUCTURE' OF STRUCTURE <lfs_fupararef> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_function_params_csv>-structure = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'DEFAULTVAL' OF STRUCTURE <lfs_fupararef> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_function_params_csv>-defaultval = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'REFERENCE' OF STRUCTURE <lfs_fupararef> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_function_params_csv>-reference = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'PPOSITION' OF STRUCTURE <lfs_fupararef> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_function_params_csv>-pposition = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'OPTIONAL' OF STRUCTURE <lfs_fupararef> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_function_params_csv>-optional = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'TYPE' OF STRUCTURE <lfs_fupararef> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_function_params_csv>-type = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'CLASS' OF STRUCTURE <lfs_fupararef> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_function_params_csv>-class = <lv_field>.
      ENDIF.
      ASSIGN COMPONENT 'REF_CLASS' OF STRUCTURE <lfs_fupararef> TO <lv_field>.
      IF sy-subrc IS INITIAL.
        <lfs_function_params_csv>-ref_class = <lv_field>.
      ENDIF.
    ENDLOOP.

    CALL METHOD write_data_to_csv
      EXPORTING
        iv_file           = iv_file
        it_data           = lt_function_params_csv
      EXCEPTIONS
        create_file_error = 1.

    IF sy-subrc IS NOT INITIAL.
      RAISE create_file_error.
    ENDIF.

  ENDMETHOD.

  METHOD export_program_attributes.

    DATA: ls_reposrc          TYPE reposrc,
          ls_trdirt           TYPE trdirt,
          lt_program_attr_csv TYPE type_program_attr_csv_t.

    FIELD-SYMBOLS: <lfs_program_attr_csv> TYPE type_program_attr_csv,
                   <lv_field>             TYPE any.

    SELECT SINGLE *
      FROM reposrc
      INTO CORRESPONDING FIELDS OF ls_reposrc
     WHERE progname EQ iv_progname
       AND r3state EQ 'A'.

    IF sy-subrc IS NOT INITIAL.
      RAISE no_program_found.
    ENDIF.

    SELECT SINGLE *
      FROM trdirt
      INTO CORRESPONDING FIELDS OF ls_trdirt
     WHERE name EQ iv_progname
       AND sprsl EQ 'E'.

    APPEND INITIAL LINE TO lt_program_attr_csv ASSIGNING <lfs_program_attr_csv>.
    ASSIGN COMPONENT 'SUBC' OF STRUCTURE ls_reposrc TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_program_attr_csv>-subc = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'TEXT' OF STRUCTURE ls_trdirt TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_program_attr_csv>-text = <lv_field>.
    ENDIF.

    CALL METHOD write_data_to_csv
      EXPORTING
        iv_file           = iv_file
        it_data           = lt_program_attr_csv
      EXCEPTIONS
        create_file_error = 1.

    IF sy-subrc IS NOT INITIAL.
      RAISE create_file_error.
    ENDIF.

  ENDMETHOD.

  METHOD export_program_source_code.

    DATA: lt_source_code             TYPE TABLE OF string,
          lt_program_source_code_csv TYPE type_program_source_code_csv_t.

    FIELD-SYMBOLS: <lfs_source_code>             TYPE string,
                   <lfs_program_source_code_csv> TYPE type_program_source_code_csv.

    READ REPORT iv_progname INTO lt_source_code.

    LOOP AT lt_source_code ASSIGNING <lfs_source_code>.
      APPEND INITIAL LINE TO lt_program_source_code_csv ASSIGNING <lfs_program_source_code_csv>.
      <lfs_program_source_code_csv>-line = <lfs_source_code>.
    ENDLOOP.

    CALL METHOD write_data_to_csv
      EXPORTING
        iv_file           = iv_file
        it_data           = lt_program_source_code_csv
      EXCEPTIONS
        create_file_error = 1.

    IF sy-subrc IS NOT INITIAL.
      RAISE create_file_error.
    ENDIF.

  ENDMETHOD.

  METHOD export_transaction_attributes.

    DATA: ls_tstc                 TYPE tstc,
          ls_tstct                TYPE tstct,
          lt_transaction_attr_csv TYPE type_transaction_attr_csv_t.

    FIELD-SYMBOLS: <lfs_transaction_attr_csv> TYPE type_transaction_attr_csv,
                   <lv_field>                 TYPE any.

    SELECT SINGLE *
      FROM tstc
      INTO CORRESPONDING FIELDS OF ls_tstc
     WHERE tcode EQ iv_tcode.

    IF sy-subrc IS NOT INITIAL.
      RAISE no_transaction_found.
    ENDIF.

    SELECT SINGLE *
      FROM tstct
      INTO CORRESPONDING FIELDS OF ls_tstct
     WHERE sprsl EQ 'E'
       AND tcode EQ iv_tcode.

    IF sy-subrc IS NOT INITIAL.
      RAISE no_transaction_found.
    ENDIF.

    APPEND INITIAL LINE TO lt_transaction_attr_csv ASSIGNING <lfs_transaction_attr_csv>.
    ASSIGN COMPONENT 'TTEXT' OF STRUCTURE ls_tstct TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_transaction_attr_csv>-ttext = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'PGMNA' OF STRUCTURE ls_tstc TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_transaction_attr_csv>-pgmna = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'DYPNO' OF STRUCTURE ls_tstc TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_transaction_attr_csv>-dypno = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'MENUE' OF STRUCTURE ls_tstc TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_transaction_attr_csv>-menue = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'CINFO' OF STRUCTURE ls_tstc TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_transaction_attr_csv>-cinfo = <lv_field>.
    ENDIF.
    ASSIGN COMPONENT 'ARBGB' OF STRUCTURE ls_tstc TO <lv_field>.
    IF sy-subrc IS INITIAL.
      <lfs_transaction_attr_csv>-arbgb = <lv_field>.
    ENDIF.

    CALL METHOD write_data_to_csv
      EXPORTING
        iv_file           = iv_file
        it_data           = lt_transaction_attr_csv
      EXCEPTIONS
        create_file_error = 1.

    IF sy-subrc IS NOT INITIAL.
      RAISE create_file_error.
    ENDIF.

  ENDMETHOD.

  METHOD write_data_to_csv.

    DATA: lo_converter TYPE REF TO cl_rsda_csv_converter,
          lt_text      TYPE TABLE OF text1000,
          lt_string    TYPE string_table.

    FIELD-SYMBOLS: <lfs_data> TYPE any,
                   <lfs_text> TYPE text1000.

    CALL METHOD cl_rsda_csv_converter=>create
      EXPORTING
        i_separator = ';'
      RECEIVING
        r_r_conv    = lo_converter.

    LOOP AT it_data ASSIGNING <lfs_data>.
      APPEND INITIAL LINE TO lt_text ASSIGNING <lfs_text>.

      CALL METHOD lo_converter->structure_to_csv
        EXPORTING
          i_s_data = <lfs_data>
        IMPORTING
          e_data   = <lfs_text>.
    ENDLOOP.

    APPEND LINES OF lt_text TO lt_string.

    CALL FUNCTION 'GUI_DOWNLOAD'
      EXPORTING
        filename                = iv_file
        codepage                = '4110'
      TABLES
        data_tab                = lt_string
      EXCEPTIONS
        file_write_error        = 1
        no_batch                = 2
        gui_refuse_filetransfer = 3
        invalid_type            = 4
        no_authority            = 5
        unknown_error           = 6
        header_not_allowed      = 7
        separator_not_allowed   = 8
        filesize_not_allowed    = 9
        header_too_long         = 10
        dp_error_create         = 11
        dp_error_send           = 12
        dp_error_write          = 13
        unknown_dp_error        = 14
        access_denied           = 15
        dp_out_of_memory        = 16
        disk_full               = 17
        dp_timeout              = 18
        file_not_found          = 19
        dataprovider_exception  = 20
        control_flush_error     = 21
        OTHERS                  = 22.

    IF sy-subrc IS NOT INITIAL.
      RAISE create_file_error.
    ENDIF.

  ENDMETHOD.

ENDCLASS.

DATA: go_import     TYPE REF TO cl_import,
      go_export     TYPE REF TO cl_export,
      gv_dir        TYPE string,
      gv_last_p_all TYPE char1 VALUE gc_abap_on,
      gv_err.

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE gv_t001.
SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS: p_imp RADIOBUTTON GROUP rbg1 DEFAULT 'X' USER-COMMAND ucmd1.
SELECTION-SCREEN COMMENT (10) gv_t003 FOR FIELD p_dir.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS: p_exp RADIOBUTTON GROUP rbg1.
SELECTION-SCREEN COMMENT (10) gv_t004 FOR FIELD p_dir.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN END OF BLOCK b1.

SELECTION-SCREEN BEGIN OF BLOCK b2 WITH FRAME TITLE gv_t002.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT (12) gv_t016 FOR FIELD p_proj.
PARAMETERS: p_proj TYPE char30.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT (12) gv_t005 FOR FIELD p_dir.
PARAMETERS: p_dir TYPE text255.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT (12) gv_t017 FOR FIELD p_proj.
PARAMETERS: p_pack TYPE char30 DEFAULT '$TMP'.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN END OF BLOCK b2.

SELECTION-SCREEN BEGIN OF BLOCK b3 WITH FRAME TITLE gv_t006.
SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS: p_all AS CHECKBOX DEFAULT 'X' USER-COMMAND ucmd2.
SELECTION-SCREEN COMMENT (31) gv_t007 FOR FIELD p_all.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 3(1) space1.
PARAMETERS: p_doma AS CHECKBOX DEFAULT 'X' MODIF ID cg1.
SELECTION-SCREEN COMMENT (31) gv_t008 FOR FIELD p_doma.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 3(1) space2.
PARAMETERS: p_dtel AS CHECKBOX DEFAULT 'X' MODIF ID cg1.
SELECTION-SCREEN COMMENT (31) gv_t009 FOR FIELD p_dtel.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 3(1) space3.
PARAMETERS: p_stru AS CHECKBOX DEFAULT 'X' MODIF ID cg1.
SELECTION-SCREEN COMMENT (31) gv_t010 FOR FIELD p_stru.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 3(1) space4.
PARAMETERS: p_tabt AS CHECKBOX DEFAULT 'X' MODIF ID cg1.
SELECTION-SCREEN COMMENT (31) gv_t011 FOR FIELD p_tabt.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 3(1) space5.
PARAMETERS: p_tabl AS CHECKBOX DEFAULT 'X' MODIF ID cg1.
SELECTION-SCREEN COMMENT (31) gv_t012 FOR FIELD p_tabl.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 3(1) space6.
PARAMETERS: p_mess AS CHECKBOX DEFAULT 'X' MODIF ID cg1.
SELECTION-SCREEN COMMENT (31) gv_t013 FOR FIELD p_mess.
SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 3(1) space11.
PARAMETERS: p_shlp AS CHECKBOX DEFAULT 'X' MODIF ID cg1.
SELECTION-SCREEN COMMENT (31) gv_t020 FOR FIELD p_shlp.
SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 3(1) space10.
PARAMETERS: p_fung AS CHECKBOX DEFAULT 'X' MODIF ID cg1.
SELECTION-SCREEN COMMENT (31) gv_t019 FOR FIELD p_fung.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 3(1) space7.
PARAMETERS: p_func AS CHECKBOX DEFAULT 'X' MODIF ID cg1.
SELECTION-SCREEN COMMENT (31) gv_t018 FOR FIELD p_func.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 3(1) space9.
PARAMETERS: p_prog AS CHECKBOX DEFAULT 'X' MODIF ID cg1.
SELECTION-SCREEN COMMENT (31) gv_t014 FOR FIELD p_prog.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 3(1) space8.
PARAMETERS: p_tran AS CHECKBOX DEFAULT 'X' MODIF ID cg1.
SELECTION-SCREEN COMMENT (31) gv_t015 FOR FIELD p_tran.
SELECTION-SCREEN END OF LINE.

*SELECTION-SCREEN BEGIN OF LINE.
*SELECTION-SCREEN COMMENT 3(1) space11.
*PARAMETERS: p_clas AS CHECKBOX DEFAULT 'X' MODIF ID cg1.
*SELECTION-SCREEN COMMENT (31) gv_t020 FOR FIELD p_clas.
*PARAMETERS: p_frnd AS CHECKBOX DEFAULT 'X' MODIF ID cg2.
*SELECTION-SCREEN COMMENT (31) gv_t021 FOR FIELD p_clas.
*SELECTION-SCREEN END OF LINE.
*select-options: clsname for SEOCLSKEY-CLSNAME.
*select-options: intname for vseointerf-clsname.
*SELECTION-SCREEN BEGIN OF LINE.
*SELECTION-SCREEN COMMENT 3(1) space12.
*PARAMETERS: p_intr AS CHECKBOX DEFAULT 'X' MODIF ID cg1.
*SELECTION-SCREEN COMMENT (31) gv_t022 FOR FIELD p_intr.
*SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN END OF BLOCK b3.

INITIALIZATION.
  gv_t001 = 'Mode'.
  gv_t002 = 'Parameters'.
  gv_t003 = 'Import'.
  gv_t004 = 'Export'.
  gv_t005 = 'Directory'.
  gv_t006 = 'Components'.
  gv_t007 = 'All'.
  gv_t008 = 'Domains'.
  gv_t009 = 'Data elements'.
  gv_t010 = 'Structures'.
  gv_t011 = 'Table types'.
  gv_t012 = 'Transparent tables'.
  gv_t013 = 'Message classes'.
  gv_t014 = 'Programs'.
  gv_t015 = 'Transactions'.
  gv_t016 = 'Project'.
  gv_t017 = 'Package'.
  gv_t018 = 'Functions'.
  gv_t019 = 'Function groups'.
  gv_t020 = 'Search helps'.
*  gv_t020 = 'Classes'.
*  gv_t021 = 'Friends'.
*  gv_t022 = 'Interfaces'.

AT SELECTION-SCREEN OUTPUT.
  LOOP AT SCREEN.
    IF screen-group1 EQ 'CG1'.
      IF p_all EQ gc_abap_on.
        screen-input = 0.
      ELSE.
        screen-input = 1.
      ENDIF.
      MODIFY SCREEN.
    ENDIF.
    IF screen-group1 EQ 'CG2'.
      IF p_all EQ gc_abap_on.
        screen-input = 0.
      ELSE.
        screen-input = 1.
      ENDIF.
      MODIFY SCREEN.
    ENDIF.
    IF screen-name EQ 'P_PROJ' OR screen-name EQ 'GV_T016'.
      IF p_exp EQ gc_abap_on.
        screen-input = 1.
        screen-invisible = 0.
      ELSE.
        screen-input = 0.
        screen-invisible = 1.
      ENDIF.
      MODIFY SCREEN.
    ENDIF.
    IF screen-name EQ 'P_PACK' OR screen-name EQ 'GV_T017'.
      IF p_imp EQ gc_abap_on.
        screen-input = 1.
        screen-invisible = 0.
      ELSE.
        screen-input = 0.
        screen-invisible = 1.
      ENDIF.
      MODIFY SCREEN.
    ENDIF.
*    IF screen-name EQ 'P_CLAS' OR screen-name EQ 'GV_T020'.
*      IF p_clas EQ gc_abap_on.
*       IF screen-group1 EQ 'CG2' OR screen-name EQ 'GV_T021'.
**          screen-active = 0.
*          screen-input = 1.
*        ENDIF.
*      ELSE.
**        screen-input = 0.
**        screen-invisible = 1.
*        IF screen-group1 EQ 'CG2' OR screen-name EQ 'GV_T021'.
**          screen-active = 1.
*          screen-input = 0.
*       ENDIF.
*        MODIFY SCREEN.
*      ENDIF.
*        IF screen-name EQ 'P_FRND' OR screen-name EQ 'GV_T021'.
*          screen-active = '0'.
**          screen-input = 1.
*        ENDIF.

*    ENDIF.
*    CASE abap_true.
*      WHEN p_clas.
*        IF screen-group1 = 'CG1'.
*          screen-active = '1'.
*          MODIFY SCREEN.
*        ELSE.
*          screen-active = '0'.
*          MODIFY SCREEN.
*        ENDIF.
*    	WHEN .
*    	WHEN OTHERS.
*    ENDCASE.
  ENDLOOP.

AT SELECTION-SCREEN.
  IF p_all EQ gc_abap_on.
    p_doma = gc_abap_on.
    p_dtel = gc_abap_on.
    p_stru = gc_abap_on.
    p_tabt = gc_abap_on.
    p_tabl = gc_abap_on.
    p_mess = gc_abap_on.
    p_shlp = gc_abap_on.
    p_fung = gc_abap_on.
    p_func = gc_abap_on.
    p_prog = gc_abap_on.
    p_tran = gc_abap_on.
*    p_clas = gc_abap_on.
*    p_frnd = gc_abap_on.
*    p_intr = gc_abap_on.
  ELSE.
    IF p_all NE gv_last_p_all.
      p_doma = gc_abap_off.
      p_dtel = gc_abap_off.
      p_stru = gc_abap_off.
      p_tabt = gc_abap_off.
      p_tabl = gc_abap_off.
      p_mess = gc_abap_off.
      p_shlp = gc_abap_off.
      p_fung = gc_abap_off.
      p_func = gc_abap_off.
      p_prog = gc_abap_off.
      p_tran = gc_abap_off.
*      p_clas = gc_abap_off.
*      p_frnd = gc_abap_off.
*      p_intr = gc_abap_off.
    ENDIF.
  ENDIF.

  gv_last_p_all = p_all.

START-OF-SELECTION.
  IF p_exp IS NOT INITIAL.
    PERFORM check_project CHANGING gv_err.
    IF gv_err EQ abap_true.
      RETURN.
    ENDIF.
  ENDIF.

  IF p_exp IS NOT INITIAL AND p_pack IS INITIAL.
    MESSAGE 'Package should be specified' TYPE 'S'.
    RETURN.
  ENDIF.

  IF p_dir IS INITIAL.
    MESSAGE 'Directory should be specified' TYPE 'S'.
    RETURN.
  ENDIF.
  gv_dir = p_dir.

  GET TIME.

  IF p_imp EQ gc_abap_on.
    CREATE OBJECT go_import.
    CALL METHOD go_import->import_selected
      EXPORTING
        iv_dir    = gv_dir
        iv_pack   = p_pack
        iv_p_doma = p_doma
        iv_p_dtel = p_dtel
        iv_p_stru = p_stru
        iv_p_tabt = p_tabt
        iv_p_tabl = p_tabl
        iv_p_mess = p_mess
        iv_p_shlp = p_shlp
        iv_p_fung = p_fung
        iv_p_func = p_func
        iv_p_prog = p_prog
        iv_p_tran = p_tran.
  ELSEIF p_exp EQ gc_abap_on.
    CREATE OBJECT go_export.
    CALL METHOD go_export->export_selected
      EXPORTING
        iv_proj   = p_proj
        iv_dir    = gv_dir
        iv_p_doma = p_doma
        iv_p_dtel = p_dtel
        iv_p_stru = p_stru
        iv_p_tabt = p_tabt
        iv_p_tabl = p_tabl
        iv_p_mess = p_mess
        iv_p_shlp = p_shlp
        iv_p_fung = p_fung
        iv_p_func = p_func
        iv_p_prog = p_prog
        iv_p_tran = p_tran.
  ENDIF.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_dir.
  gv_dir = p_dir.

  CALL METHOD cl_gui_frontend_services=>directory_browse
    EXPORTING
      initial_folder  = gv_dir
    CHANGING
      selected_folder = gv_dir
    EXCEPTIONS
      cntl_error      = 1
      error_no_gui    = 2
      OTHERS          = 3.

  IF sy-subrc IS INITIAL.
    CALL METHOD cl_gui_cfw=>flush.
    IF gv_dir IS NOT INITIAL.
      p_dir = gv_dir.
    ENDIF.
  ENDIF.

FORM check_project CHANGING cv_err.

  TYPES: BEGIN OF type_export,
           project     TYPE char30,
           line        TYPE int4,
           object_type TYPE char30,
           object_name TYPE char40,
         END OF type_export.

  DATA: lt_export       TYPE TABLE OF type_export,
        lv_where_clause TYPE char50.

  IF p_proj IS INITIAL.
    MESSAGE 'Exporting project should be specified' TYPE 'S'.
    cv_err = abap_true.
    RETURN.
  ENDIF.

  CONCATENATE 'PROJECT EQ ''' p_proj '''' INTO lv_where_clause.

  SELECT *
    FROM (gc_export_table_name)
    INTO CORRESPONDING FIELDS OF TABLE lt_export
   WHERE (lv_where_clause).

  IF sy-subrc IS NOT INITIAL.
    MESSAGE 'Exporting project does not exist' TYPE 'S'.
    cv_err = abap_true.
    RETURN.
  ENDIF.

ENDFORM.

*INCLUDE zafs_migrate_class_def.